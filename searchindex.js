Search.setIndex({"docnames": ["api_reference/account", "api_reference/account_id", "api_reference/config", "api_reference/crypto", "api_reference/crypto_hash", "api_reference/error/core", "api_reference/error/exception", "api_reference/error/index", "api_reference/error/vm", "api_reference/index", "api_reference/merkle", "api_reference/transaction", "examples", "index"], "filenames": ["api_reference/account.rst", "api_reference/account_id.rst", "api_reference/config.rst", "api_reference/crypto.rst", "api_reference/crypto_hash.rst", "api_reference/error/core.rst", "api_reference/error/exception.rst", "api_reference/error/index.rst", "api_reference/error/vm.rst", "api_reference/index.rst", "api_reference/merkle.rst", "api_reference/transaction.rst", "examples.rst", "index.rst"], "titles": ["account", "account_id", "config", "crypto", "crypto_hash", "core", "exception", "error", "vm", "API Reference", "merkle", "transaction", "Examples", "pyonear"], "terms": {"class": [0, 1, 2, 3, 4, 5, 8, 10, 11], "functioncallpermiss": [0, 9, 12, 13], "grant": 0, "limit": [0, 5, 8], "permiss": [0, 5, 11, 12], "make": [0, 11], "transact": [0, 5, 9, 13], "functioncallact": [0, 9, 11, 12, 13], "The": [0, 3, 4, 5, 8, 11, 13], "can": [0, 5, 8, 11, 12], "allow": [0, 5, 8, 12], "balanc": [0, 5], "spent": 0, "prepaid": [0, 5, 11], "ga": [0, 5, 11, 12], "It": [0, 11, 13], "also": [0, 3], "restrict": 0, "id": [0, 1, 3, 5, 8, 11], "receiv": [0, 5, 11], "thi": [0, 1, 3, 11, 12], "function": [0, 5, 8, 13], "call": [0, 1, 5, 8, 11], "method": [0, 5, 11, 12], "name": [0, 5, 11], "i": [0, 1, 5, 6, 8, 11], "us": [0, 4, 5, 11], "access": [0, 5, 8, 11], "kei": [0, 3, 5, 6, 8, 11, 13], "pai": 0, "fee": [0, 2], "when": [0, 5, 6], "both": [0, 11], "decreas": 0, "same": 0, "valu": [0, 8, 11], "none": [0, 3, 11, 12], "mean": 0, "unlimit": 0, "note": [0, 11], "To": 0, "chang": [0, 11], "increas": [0, 5], "old": 0, "need": 0, "delet": [0, 5, 11], "new": [0, 4], "should": [0, 11], "creat": [0, 3, 5, 11, 13], "type": [0, 2, 3, 10, 11, 13], "int": [0, 3, 11], "static": [0, 1, 3, 4, 5, 8, 10, 11], "from_byt": [0, 1, 3, 4, 5, 8, 10, 11, 12], "data": [0, 1, 3, 4, 5, 8, 10, 11, 12], "deseri": [0, 1, 3, 4, 5, 8, 10, 11, 13], "from": [0, 1, 3, 4, 5, 6, 8, 10, 11, 12, 13], "byte": [0, 1, 3, 4, 5, 8, 10, 11, 12], "paramet": [0, 1, 3, 4, 5, 8, 10, 11], "serial": [0, 1, 3, 4, 5, 8, 10, 11, 13], "object": [0, 1, 3, 4, 5, 8, 10, 11], "return": [0, 1, 3, 4, 5, 8, 10, 11], "from_json": [0, 1, 3, 4, 5, 8, 10, 11], "raw": [0, 1, 3, 4, 5, 8, 10, 11], "build": [0, 1, 3, 4, 5, 8, 10, 11, 13], "json": [0, 1, 3, 4, 5, 8, 10, 11, 12], "string": [0, 1, 3, 4, 5, 8, 10, 11, 12], "method_nam": [0, 5, 8, 11, 12], "A": [0, 3, 5, 8, 11], "list": [0, 3, 11], "onli": [0, 5, 11], "one": [0, 11, 13], "given": [0, 3, 4, 5, 11], "empti": [0, 3], "ani": 0, "str": [0, 3, 4, 11], "receiver_id": [0, 5, 11, 12, 13], "": [0, 3, 4, 11], "to_json": [0, 1, 3, 4, 5, 8, 10, 11], "convert": [0, 1, 3, 4, 5, 8, 10, 11], "accesskeypermissionfieldless": [0, 9, 13], "fullaccess": 0, "accesskei": [0, 5, 9, 11, 12, 13], "provid": [0, 1, 13], "an": [0, 1, 3, 5, 6, 8, 11, 13], "each": 0, "belong": 0, "some": [0, 5, 11], "identifi": [0, 1, 5, 11], "uniqu": [0, 1], "within": [0, 8], "public": [0, 3, 5, 11], "One": 0, "mai": 0, "have": [0, 5, 11], "larg": [0, 5], "number": [0, 5, 8], "act": 0, "behalf": [0, 11], "issu": 0, "access_key_nonce_range_multipli": 0, "1000000": 0, "full_access": 0, "nonc": [0, 5, 11, 12, 13], "tx": [0, 5], "gener": [0, 3, 8, 11], "set": [0, 11], "block_height": 0, "1": [0, 1, 4, 5, 12], "1e6": 0, "avoid": 0, "hash": [0, 4, 8, 10, 11], "collis": 0, "re": 0, "creation": [0, 5, 8], "see": [0, 1, 3, 5, 11], "http": [0, 3, 5, 11], "github": [0, 5], "com": [0, 5], "nearcor": 0, "3779": 0, "more": [0, 11], "detail": 0, "defin": [0, 5], "accesskeypermiss": 0, "per": 0, "inform": 0, "store": [0, 3], "state": [0, 5], "max_account_deletion_storage_usag": 0, "10000": 0, "amount": [0, 5, 11], "total": [0, 5, 8, 11], "lock": [0, 5], "token": [0, 11], "code_hash": 0, "code": [0, 5, 11], "storag": [0, 5, 8], "cryptohash": [0, 4, 9, 10, 11, 12, 13], "due": 0, "stake": [0, 2, 5, 11, 12], "storage_usag": 0, "includ": 0, "struct": [0, 11], "other": [0, 11], "version": [0, 11], "migrat": 0, "similar": 0, "accountvers": [0, 9, 13], "v1": [0, 11], "accountid": [1, 3, 5, 9, 11, 12, 13], "NEAR": [1, 11, 12, 13], "account": [1, 3, 5, 9, 11, 13], "syntact": 1, "valid": [1, 5, 11], "human": 1, "readabl": 1, "network": 1, "exampl": [1, 4], "pyonear": [1, 4, 12], "import": [1, 4, 8, 12, 13], "alic": [1, 12, 13], "\u0192elicia": 1, "\u0192": 1, "f": 1, "traceback": 1, "most": 1, "recent": 1, "last": 1, "file": [1, 3, 13], "stdin": 1, "line": 1, "modul": [1, 7, 9], "valueerror": 1, "contain": [1, 11], "invalid": [1, 5, 8], "charact": [1, 5], "index": [1, 5, 8], "0": [1, 4, 12, 13], "max_len": 1, "64": [1, 3, 5], "min_len": 1, "2": [1, 4, 12], "is_implicit": 1, "true": [1, 12], "long": 1, "hexadecim": 1, "implicit": [1, 5], "fals": [1, 3], "rando": 1, "98793cd91a3f870fb126f66285808c7e094afcfc4eda8a970f6648cdf0dbd6d": 1, "is_sub_account_of": 1, "parent": 1, "direct": [1, 9, 10, 13], "sub": 1, "subaccount": 1, "near_tla": 1, "is_top_level": 1, "alice_app": 1, "app": 1, "is_system": 1, "system": 1, "top": [1, 5, 11], "level": [1, 5], "well": 1, "structur": 1, "check": 1, "without": 1, "construct": [1, 12], "instanc": 1, "actioncost": [2, 9, 11, 13], "add_kei": [2, 11], "create_account": [2, 11], "delete_account": [2, 11], "delete_kei": [2, 11], "deploy_contract": [2, 11], "function_cal": [2, 11], "new_receipt": 2, "transfer": [2, 11], "value_return": 2, "extcost": [2, 9, 11, 13], "strongli": 2, "represent": 2, "count": 2, "alt_bn128_g1_multiexp_bas": 2, "alt_bn128_g1_multiexp_el": 2, "alt_bn128_g1_sum_bas": 2, "alt_bn128_g1_sum_el": 2, "alt_bn128_pairing_check_bas": 2, "alt_bn128_pairing_check_el": 2, "base": 2, "contract_loading_bas": 2, "contract_loading_byt": 2, "ecrecover_bas": 2, "ed25519_verify_bas": 2, "ed25519_verify_byt": 2, "keccak256_bas": 2, "keccak256_byt": 2, "keccak512_bas": 2, "keccak512_byt": 2, "log_bas": 2, "log_byt": 2, "promise_and_bas": 2, "promise_and_per_promis": 2, "promise_return": 2, "read_cached_trie_nod": 2, "read_memory_bas": 2, "read_memory_byt": 2, "read_register_bas": 2, "read_register_byt": 2, "ripemd160_bas": 2, "ripemd160_block": 2, "sha256_bas": 2, "sha256_byt": 2, "storage_has_key_bas": 2, "storage_has_key_byt": 2, "storage_iter_create_from_byt": 2, "storage_iter_create_prefix_bas": 2, "storage_iter_create_prefix_byt": 2, "storage_iter_create_range_bas": 2, "storage_iter_create_to_byt": 2, "storage_iter_next_bas": 2, "storage_iter_next_key_byt": 2, "storage_iter_next_value_byt": 2, "storage_read_bas": 2, "storage_read_key_byt": 2, "storage_read_value_byt": 2, "storage_remove_bas": 2, "storage_remove_key_byt": 2, "storage_remove_ret_value_byt": 2, "storage_write_bas": 2, "storage_write_evicted_byt": 2, "storage_write_key_byt": 2, "storage_write_value_byt": 2, "touching_trie_nod": 2, "utf16_decoding_bas": 2, "utf16_decoding_byt": 2, "utf8_decoding_bas": 2, "utf8_decoding_byt": 2, "validator_stake_bas": 2, "validator_total_stake_bas": 2, "write_memory_bas": 2, "write_memory_byt": 2, "write_register_bas": 2, "write_register_byt": 2, "ed25519publickei": [3, 9, 12, 13], "length": [3, 5, 8], "32": [3, 4], "pubkei": [3, 11], "from_se": 3, "seed": 3, "from_str": [3, 4, 12], "pars": [3, 4, 6], "secp256k1publickei": [3, 9, 13], "ed25519secretkei": [3, 9, 12, 13], "from_random": [3, 12, 13], "randomli": 3, "public_kei": [3, 5, 11, 12, 13], "retriev": [3, 11], "secret": 3, "sign": [3, 11, 12, 13], "messag": 3, "sequenc": [3, 11], "ed25519signatur": [3, 9, 13], "signatur": [3, 6, 8, 11, 13], "secp256k1secretkei": [3, 9, 13], "secp256k1signatur": [3, 9, 13], "verifi": [3, 13], "come": [3, 13], "isn": [3, 5, 8], "t": [3, 5, 8, 11], "curv": [3, 8], "unsign": [3, 11], "signer": [3, 5, 11, 12, 13], "verif": [3, 8], "result": [3, 8, 11], "bool": 3, "65": 3, "check_signature_valu": 3, "reject_upp": 3, "recov": [3, 8], "msg": [3, 8], "emptysign": [3, 9, 13], "inmemorysign": [3, 9, 12, 13], "account_id": [3, 5, 8, 9, 12, 13], "compute_vrf_with_proof": 3, "doc": [3, 11], "r": [3, 11], "latest": [3, 11], "near_crypto": 3, "trait": [3, 4], "html": [3, 11], "tymethod": 3, "tupl": 3, "from_fil": 3, "path": [3, 11], "read": 3, "pathlib": 3, "key_typ": 3, "from_secret_kei": 3, "secret_kei": [3, 12], "secretkei": 3, "keytyp": [3, 9, 12, 13], "publickei": [3, 11], "write_to_fil": [3, 12], "save": [3, 13], "ed25519": [3, 8, 12, 13], "secp256k1": [3, 6], "keyfil": [3, 9, 12, 13], "write": 3, "default": [4, 12, 13], "rust": [4, 13], "hash_byt": 4, "calcul": 4, "zero": 4, "initi": 4, "slice": [4, 6], "below": 4, "indic": 4, "3": [4, 12, 13], "euthbsdt1yczhxjcfqhnlpl1vfrksylsio4vkphfnek": 4, "actionsvalidationerrorfieldless": [5, 7], "deleteactionmustbefin": 5, "functioncallzeroattachedga": 5, "integeroverflow": [5, 8], "totalprepaidgasexceed": [5, 7], "all": 5, "action": [5, 8, 11, 13], "exceed": [5, 8], "total_prepaid_ga": 5, "totalnumberofactionsexceed": [5, 7], "total_number_of_act": 5, "addkeymethodnamesnumberofbytesexceed": [5, 7], "add": [5, 11], "total_number_of_byt": 5, "addkeymethodnamelengthexceed": [5, 7], "invalidaccountid": [5, 7, 8], "contractsizeexceed": [5, 7, 8], "size": [5, 8, 11], "contract": [5, 8, 11], "deploycontract": [5, 8, 11], "functioncallmethodnamelengthexceed": [5, 7], "functioncallargumentslengthexceed": [5, 7], "argument": [5, 11], "unsuitablestakingkei": [5, 7], "attempt": 5, "ristretto": 5, "invalidpredecessorid": [5, 7], "predecessor_id": 5, "receipt": [5, 8, 11], "receiptinvalidreceiverid": [5, 7], "receiptinvalidsignerid": [5, 7], "signer_id": [5, 11, 12, 13], "actionreceipt": 5, "invaliddatareceiverid": [5, 7], "datareceipt": 5, "returnedvaluelengthexceed": [5, 7, 8], "numberinputdatadependenciesexceed": [5, 7, 8], "input": [5, 8], "depend": [5, 8], "exce": [5, 8], "number_of_input_data_depend": [5, 8], "invalidaccesskeyerrorfieldless": [5, 7], "happen": [5, 8, 11], "wrong": 5, "ha": 5, "enough": 5, "depositwithfunctioncal": 5, "requiresfullaccess": 5, "accesskeynotfound": [5, 7], "doesn": [5, 11], "exist": [5, 8], "receivermismatch": [5, 7], "match": 5, "ak_receiv": 5, "tx_receiv": 5, "methodnamemismatch": [5, 7], "notenoughallow": [5, 7], "doe": [5, 8, 12], "cover": 5, "cost": [5, 11], "invalidtxerrorfieldless": [5, 7], "costoverflow": 5, "expir": 5, "invalidchain": 5, "invalidsignatur": 5, "invalidsignerid": [5, 7], "signerdoesnotexist": [5, 7], "found": 5, "invalidnonc": [5, 7], "must": 5, "access_kei": [5, 11, 12], "ak_nonc": 5, "tx_nonc": 5, "noncetoolarg": [5, 7], "larger": 5, "than": [5, 11], "upper": 5, "bound": 5, "block": [5, 11], "height": 5, "upper_bound": 5, "invalidreceiverid": [5, 7], "notenoughbal": [5, 7], "lackbalanceforst": [5, 7], "after": [5, 8], "which": [5, 8, 11], "requir": [5, 13], "transactionsizeexceed": [5, 7], "accountalreadyexist": [5, 7], "createaccount": [5, 11], "tri": 5, "alreadi": 5, "accountdoesnotexist": [5, 7], "createaccountonlybyregistrar": [5, 7], "registrar": 5, "registrar_account_id": 5, "createaccountnotallow": [5, 7], "newli": 5, "under": 5, "namespac": 5, "creator": 5, "actornopermiss": [5, 7], "administr": 5, "like": 5, "addkei": [5, 11], "deletekei": [5, 11], "proce": 5, "sender": 5, "first": 5, "actor_id": 5, "deletekeydoesnotexist": [5, 7], "remov": 5, "addkeyalreadyexist": [5, 7], "deleteaccountstak": [5, 7], "triestounstak": [5, 7], "yet": 5, "unstak": 5, "triestostak": [5, 7], "insufficientstak": [5, 7], "minimum_stak": 5, "onlyimplicitaccountcreationallow": [5, 7], "error": [5, 6, 8, 9, 13], "occur": [5, 8], "hex": 5, "nep": 5, "nearprotocol": 5, "pull": 5, "71": 5, "deleteaccountwithlargest": [5, 7], "whose": [5, 11], "temporarili": 5, "ban": 5, "actionerror": [5, 7], "dure": [5, 8], "acton": 5, "execut": [5, 8, 11], "fail": [5, 6], "kind": [5, 8, 11], "actionerrorkind": 5, "parsekeyerror": [6, 7], "rais": 6, "encount": 6, "cryptograph": 6, "parsesignatureerror": [6, 7], "tryfromsliceerror": [6, 7], "convers": 6, "arrai": 6, "secp256k1error": [6, 7], "librari": 6, "core": [7, 9, 11, 13], "except": [7, 9, 13], "vm": [7, 9, 11, 13], "hosterrorfieldless": [7, 8], "guestpan": [7, 8], "invalidpromiseindex": [7, 8], "invalidpromiseresultindex": [7, 8], "invalidregisterid": [7, 8], "iteratorwasinvalid": [7, 8], "invalidreceiptindex": [7, 8], "invaliditeratorindex": [7, 8], "prohibitedinview": [7, 8], "numberoflogsexceed": [7, 8], "keylengthexceed": [7, 8], "valuelengthexceed": [7, 8], "totalloglengthexceed": [7, 8], "numberpromisesexceed": [7, 8], "deprec": [7, 8], "ecrecovererror": [7, 8], "ed25519verifyinvalidinput": [7, 8], "altbn128invalidinput": [7, 8], "codedoesnotexist": [7, 8], "prepareerror": [7, 8], "wasmercompileerror": [7, 8], "unsupportedcompil": [7, 8], "cacheerrorfieldless": [7, 8], "serializationerror": [7, 8], "functioncallerrorserfieldless": [7, 8], "linkerror": [7, 8], "methodresolveerror": [7, 8], "wasmtrap": [7, 8], "badutf16": 8, "badutf8": 8, "balanceexceed": 8, "cannotappendactiontojointpromis": 8, "cannotreturnjointpromis": 8, "emptymethodnam": 8, "gasexceed": 8, "gaslimitexceed": 8, "invalidmethodnam": 8, "invalidpublickei": 8, "memoryaccessviol": 8, "smart": 8, "panick": 8, "panic_msg": 8, "promise_idx": 8, "correspond": [8, 11], "promis": 8, "result_idx": 8, "regist": 8, "register_id": 8, "iter": 8, "iterator_index": 8, "wa": [8, 11], "its": [8, 12], "perform": 8, "mutabl": [8, 11], "oper": 8, "trie": 8, "logic": [8, 11], "receipt_index": 8, "view": 8, "log": [8, 11], "maximum": 8, "functioncal": [8, 11], "number_of_promis": 8, "host": 8, "ecdsa": 8, "e": 8, "g": 8, "cannot": [8, 11], "deriv": 8, "alt_bn128": 8, "familii": 8, "point": 8, "while": 8, "prepar": 8, "wasm": [8, 11], "gasinstrument": 8, "instanti": 8, "internalmemorydeclar": 8, "memori": 8, "stackheightinstrument": 8, "deserializationerror": 8, "readerror": 8, "writeerror": 8, "wasmunknownerror": 8, "binari": [8, 11], "env": 8, "link": 8, "export": 8, "resolv": 8, "methodemptynam": 8, "methodinvalidsignatur": 8, "methodnotfound": 8, "trap": 8, "callindirectoob": 8, "generictrap": 8, "illegalarithmet": 8, "incorrectcallindirectsignatur": 8, "indirectcalltonul": 8, "memoryoutofbound": 8, "misalignedatomicaccess": 8, "stackoverflow": 8, "unreach": 8, "config": [9, 13], "crypto_hash": [9, 12, 13], "crypto": [9, 12, 13], "merkl": [9, 13], "merklepathitem": [9, 10, 11, 13], "createaccountact": [9, 11, 12, 13], "deploycontractact": [9, 11, 12, 13], "transferact": [9, 11, 12, 13], "stakeact": [9, 11, 12, 13], "addkeyact": [9, 11, 12, 13], "deletekeyact": [9, 11, 12, 13], "deleteaccountact": [9, 11, 12, 13], "verify_transaction_signatur": [9, 11, 13], "executionstatusfieldless": [9, 11, 13], "partialexecutionstatusfieldless": [9, 11, 13], "executionmetadatafieldless": [9, 11, 13], "profiledata": [9, 11, 13], "signedtransact": [9, 11, 13], "executionoutcom": [9, 11, 13], "executionoutcomewithid": [9, 11, 13], "executionoutcomewithidandproof": [9, 11, 13], "field": [10, 11], "item": 10, "left": 10, "right": 10, "deploi": 11, "webassembli": 11, "arg": [11, 12], "pass": [11, 12], "deposit": [11, 12], "yoctonear": 11, "send": [11, 12], "togeth": 11, "max": 11, "up": 11, "associ": 11, "beneficiary_id": 11, "unknown": 11, "failur": 11, "profil": 11, "consumpt": 11, "action_ga": 11, "primit": [11, 13], "near_primitives_cor": 11, "add_action_cost": 11, "add_ext_cost": 11, "ext": 11, "compute_wasm_instruction_cost": 11, "total_gas_burnt": 11, "wasminstruct": 11, "we": 11, "don": 11, "explicitli": 11, "instead": 11, "comput": 11, "end": 11, "differ": 11, "between": 11, "burnt": 11, "what": 11, "ve": 11, "becaus": 11, "hottest": 11, "implement": 11, "help": [11, 12], "side": 11, "so": 11, "want": 11, "simplic": 11, "effici": 11, "reason": 11, "program_id": 11, "program": 11, "instruct": 11, "get_action_cost": 11, "get_ext_cost": 11, "host_ga": 11, "merg": 11, "collect": 11, "describ": 11, "done": 11, "destin": 11, "org": 11, "concept": 11, "basic": 11, "overview": 11, "transaciton": 11, "determin": 11, "order": 11, "pool": 11, "increment": 11, "combin": 11, "block_hash": [11, 12, 13], "blockchain": 11, "appli": 11, "deleteaccount": 11, "benficiary_id": 11, "get_hash_and_s": 11, "hold": 11, "certain": 11, "transasct": 11, "signedtransct": 11, "insid": 11, "If": 11, "you": [11, 12], "my_signed_tx": 11, "from_base64": 11, "base64": [11, 12], "encod": 11, "to_base64": [11, 12, 13], "outcom": 11, "executor_id": 11, "For": 11, "gas_burnt": 11, "metadata": 11, "executionmetadata": 11, "receipt_id": 11, "statu": 11, "case": 11, "success": 11, "sinc": 11, "unpars": 11, "light": 11, "client": 11, "executionstatu": 11, "tokens_burnt": 11, "alwai": 11, "equal": 11, "multipli": 11, "price": 11, "might": 11, "lower": 11, "actual": 11, "deficit": 11, "to_hash": 11, "root": 11, "get": 11, "outcome_with_id": 11, "proof": 11, "current": 12, "form": 12, "intend": 12, "abstract": 12, "awai": 12, "talk": 12, "rpc": 12, "server": 12, "rather": 12, "bob": [12, 13], "replac": [12, 13], "real": [12, 13], "blockhash": [12, 13], "1_000_000": [12, 13], "b": 12, "n": 12, "x00": 12, "x00alic": 12, "xeajp0": 12, "x86": 12, "xfb": 12, "x9cd": 12, "x8f": 12, "xd3": 12, "xcc_": 12, "x87": 12, "xd5": 12, "xc2_": 12, "xd4": 12, "xce": 12, "xb4": 12, "tr": 12, "xc1": 12, "xa65": 12, "x17": 12, "x91": 12, "xb9": 12, "xac": 12, "x07": 12, "x8e": 12, "x93": 12, "x08": 12, "x00bob": 12, "x01": 12, "x03": 12, "x0f": 12, "xbc": 12, "x8fo": 12, "x18": 12, "xf9": 12, "x82": 12, "xd1pu": 12, "xa7": 12, "xe5": 12, "gq": 12, "x8d": 12, "xc6o": 12, "x8c": 12, "xc7": 12, "x1du": 12, "x8fe": 12, "xbe": 12, "x88": 12, "xba": 12, "x9eql": 12, "xc4n": 12, "xf19": 12, "x14u": 12, "xa3": 12, "xcd": 12, "x9e": 12, "xcc": 12, "xd3tv2u": 12, "xae": 12, "o": 12, "xf2": 12, "xca": 12, "xef": 12, "cgaaagfsawnllm5lyxia": [12, 13], "m56upzui8ezkhqjbljc7zczjk88zoipf5xkjum13kaaaaaaaaaaagaaabib2iubmvhcgaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaqaaaanaqg8aaaaaaaaaaaaaaaaaalk42w7t": [12, 13], "vpumdagtchtuwevvse3cqzwrla8spn6kfnv9fwn16klroeblzh480b0a": [12, 13], "nsl16yfnvwlnd2c9kltqk": [12, 13], "broadcast_tx_": 12, "api": [12, 13], "acc": 12, "100": 12, "bytes_": 12, "evk5uaxbe8lq8r8id5eaxvbs6tjcmdkqyh7pbuho6bbj": 12, "assert": 12, "3d4yuduahn1nawwogh8paksj92sunmdbzgjn7kerkzyoty8tnfquwoguc51dowkqorvkr2pytjsnwusbsnvfqygr": 12, "tmp": 12, "hashlib": 12, "m": 12, "sha256": 12, "updat": 12, "123": 12, "digest": 12, "22skmpthjfwnyuewy22ftn2ablpsypmywgjrgwpnhbtv": 12, "test": 12, "qqq": 12, "1_000": 12, "zzz": 12, "www": 12, "python": 13, "bind": 13, "wrapper": 13, "de": 13, "wrap": 13, "crate": 13, "pip": 13, "7": 13, "multipl": 13, "refer": 13}, "objects": {"pyonear": [[0, 0, 0, "-", "account"], [1, 0, 0, "-", "account_id"], [2, 0, 0, "-", "config"], [3, 0, 0, "-", "crypto"], [4, 0, 0, "-", "crypto_hash"], [10, 0, 0, "-", "merkle"], [11, 0, 0, "-", "transaction"]], "pyonear.account": [[0, 1, 1, "", "AccessKey"], [0, 1, 1, "", "AccessKeyPermissionFieldless"], [0, 1, 1, "", "Account"], [0, 1, 1, "", "AccountVersion"], [0, 1, 1, "", "FunctionCallPermission"]], "pyonear.account.AccessKey": [[0, 2, 1, "", "ACCESS_KEY_NONCE_RANGE_MULTIPLIER"], [0, 3, 1, "", "from_bytes"], [0, 3, 1, "", "from_json"], [0, 3, 1, "", "full_access"], [0, 2, 1, "", "nonce"], [0, 2, 1, "", "permission"], [0, 3, 1, "", "to_json"]], "pyonear.account.AccessKeyPermissionFieldless": [[0, 2, 1, "", "FullAccess"]], "pyonear.account.Account": [[0, 2, 1, "", "MAX_ACCOUNT_DELETION_STORAGE_USAGE"], [0, 2, 1, "", "amount"], [0, 2, 1, "", "code_hash"], [0, 3, 1, "", "from_bytes"], [0, 3, 1, "", "from_json"], [0, 2, 1, "", "locked"], [0, 2, 1, "", "storage_usage"], [0, 3, 1, "", "to_json"], [0, 2, 1, "", "version"]], "pyonear.account.AccountVersion": [[0, 2, 1, "", "V1"]], "pyonear.account.FunctionCallPermission": [[0, 2, 1, "", "allowance"], [0, 3, 1, "", "from_bytes"], [0, 3, 1, "", "from_json"], [0, 2, 1, "", "method_names"], [0, 2, 1, "", "receiver_id"], [0, 3, 1, "", "to_json"]], "pyonear.account_id": [[1, 1, 1, "", "AccountId"]], "pyonear.account_id.AccountId": [[1, 2, 1, "", "MAX_LEN"], [1, 2, 1, "", "MIN_LEN"], [1, 3, 1, "", "from_bytes"], [1, 3, 1, "", "from_json"], [1, 3, 1, "", "is_implicit"], [1, 3, 1, "", "is_sub_account_of"], [1, 3, 1, "", "is_system"], [1, 3, 1, "", "is_top_level"], [1, 3, 1, "", "to_json"], [1, 3, 1, "", "validate"]], "pyonear.config": [[2, 1, 1, "", "ActionCosts"], [2, 1, 1, "", "ExtCosts"]], "pyonear.config.ActionCosts": [[2, 2, 1, "", "add_key"], [2, 2, 1, "", "create_account"], [2, 2, 1, "", "delete_account"], [2, 2, 1, "", "delete_key"], [2, 2, 1, "", "deploy_contract"], [2, 2, 1, "", "function_call"], [2, 2, 1, "", "new_receipt"], [2, 2, 1, "", "stake"], [2, 2, 1, "", "transfer"], [2, 2, 1, "", "value_return"]], "pyonear.config.ExtCosts": [[2, 2, 1, "", "alt_bn128_g1_multiexp_base"], [2, 2, 1, "", "alt_bn128_g1_multiexp_element"], [2, 2, 1, "", "alt_bn128_g1_sum_base"], [2, 2, 1, "", "alt_bn128_g1_sum_element"], [2, 2, 1, "", "alt_bn128_pairing_check_base"], [2, 2, 1, "", "alt_bn128_pairing_check_element"], [2, 2, 1, "", "base"], [2, 2, 1, "", "contract_loading_base"], [2, 2, 1, "", "contract_loading_bytes"], [2, 2, 1, "", "ecrecover_base"], [2, 2, 1, "", "ed25519_verify_base"], [2, 2, 1, "", "ed25519_verify_byte"], [2, 2, 1, "", "keccak256_base"], [2, 2, 1, "", "keccak256_byte"], [2, 2, 1, "", "keccak512_base"], [2, 2, 1, "", "keccak512_byte"], [2, 2, 1, "", "log_base"], [2, 2, 1, "", "log_byte"], [2, 2, 1, "", "promise_and_base"], [2, 2, 1, "", "promise_and_per_promise"], [2, 2, 1, "", "promise_return"], [2, 2, 1, "", "read_cached_trie_node"], [2, 2, 1, "", "read_memory_base"], [2, 2, 1, "", "read_memory_byte"], [2, 2, 1, "", "read_register_base"], [2, 2, 1, "", "read_register_byte"], [2, 2, 1, "", "ripemd160_base"], [2, 2, 1, "", "ripemd160_block"], [2, 2, 1, "", "sha256_base"], [2, 2, 1, "", "sha256_byte"], [2, 2, 1, "", "storage_has_key_base"], [2, 2, 1, "", "storage_has_key_byte"], [2, 2, 1, "", "storage_iter_create_from_byte"], [2, 2, 1, "", "storage_iter_create_prefix_base"], [2, 2, 1, "", "storage_iter_create_prefix_byte"], [2, 2, 1, "", "storage_iter_create_range_base"], [2, 2, 1, "", "storage_iter_create_to_byte"], [2, 2, 1, "", "storage_iter_next_base"], [2, 2, 1, "", "storage_iter_next_key_byte"], [2, 2, 1, "", "storage_iter_next_value_byte"], [2, 2, 1, "", "storage_read_base"], [2, 2, 1, "", "storage_read_key_byte"], [2, 2, 1, "", "storage_read_value_byte"], [2, 2, 1, "", "storage_remove_base"], [2, 2, 1, "", "storage_remove_key_byte"], [2, 2, 1, "", "storage_remove_ret_value_byte"], [2, 2, 1, "", "storage_write_base"], [2, 2, 1, "", "storage_write_evicted_byte"], [2, 2, 1, "", "storage_write_key_byte"], [2, 2, 1, "", "storage_write_value_byte"], [2, 2, 1, "", "touching_trie_node"], [2, 2, 1, "", "utf16_decoding_base"], [2, 2, 1, "", "utf16_decoding_byte"], [2, 2, 1, "", "utf8_decoding_base"], [2, 2, 1, "", "utf8_decoding_byte"], [2, 2, 1, "", "validator_stake_base"], [2, 2, 1, "", "validator_total_stake_base"], [2, 2, 1, "", "write_memory_base"], [2, 2, 1, "", "write_memory_byte"], [2, 2, 1, "", "write_register_base"], [2, 2, 1, "", "write_register_byte"]], "pyonear.crypto": [[3, 1, 1, "", "ED25519PublicKey"], [3, 1, 1, "", "ED25519SecretKey"], [3, 1, 1, "", "ED25519Signature"], [3, 1, 1, "", "EmptySigner"], [3, 1, 1, "", "InMemorySigner"], [3, 1, 1, "", "KeyFile"], [3, 1, 1, "", "KeyType"], [3, 1, 1, "", "Secp256K1PublicKey"], [3, 1, 1, "", "Secp256K1SecretKey"], [3, 1, 1, "", "Secp256K1Signature"]], "pyonear.crypto.ED25519PublicKey": [[3, 2, 1, "", "LENGTH"], [3, 3, 1, "", "empty"], [3, 3, 1, "", "from_bytes"], [3, 3, 1, "", "from_json"], [3, 3, 1, "", "from_seed"], [3, 3, 1, "", "from_str"], [3, 3, 1, "", "to_json"]], "pyonear.crypto.ED25519SecretKey": [[3, 2, 1, "", "LENGTH"], [3, 3, 1, "", "from_bytes"], [3, 3, 1, "", "from_json"], [3, 3, 1, "", "from_random"], [3, 3, 1, "", "from_seed"], [3, 3, 1, "", "from_str"], [3, 3, 1, "", "public_key"], [3, 3, 1, "", "sign"], [3, 3, 1, "", "to_json"]], "pyonear.crypto.ED25519Signature": [[3, 2, 1, "", "LENGTH"], [3, 3, 1, "", "empty"], [3, 3, 1, "", "from_bytes"], [3, 3, 1, "", "from_json"], [3, 3, 1, "", "from_str"], [3, 3, 1, "", "to_json"], [3, 3, 1, "", "verify"]], "pyonear.crypto.EmptySigner": [[3, 3, 1, "", "public_key"], [3, 3, 1, "", "sign"], [3, 3, 1, "", "verify"]], "pyonear.crypto.InMemorySigner": [[3, 2, 1, "", "account_id"], [3, 3, 1, "", "compute_vrf_with_proof"], [3, 3, 1, "", "from_bytes"], [3, 3, 1, "", "from_file"], [3, 3, 1, "", "from_json"], [3, 3, 1, "", "from_random"], [3, 3, 1, "", "from_secret_key"], [3, 3, 1, "", "from_seed"], [3, 2, 1, "", "public_key"], [3, 2, 1, "", "secret_key"], [3, 3, 1, "", "sign"], [3, 3, 1, "", "to_json"], [3, 3, 1, "", "verify"], [3, 3, 1, "", "write_to_file"]], "pyonear.crypto.KeyFile": [[3, 2, 1, "", "account_id"], [3, 3, 1, "", "from_bytes"], [3, 3, 1, "", "from_file"], [3, 3, 1, "", "from_json"], [3, 2, 1, "", "public_key"], [3, 2, 1, "", "secret_key"], [3, 3, 1, "", "to_json"], [3, 3, 1, "", "write_to_file"]], "pyonear.crypto.KeyType": [[3, 2, 1, "", "ED25519"], [3, 2, 1, "", "SECP256K1"]], "pyonear.crypto.Secp256K1PublicKey": [[3, 2, 1, "", "LENGTH"], [3, 3, 1, "", "empty"], [3, 3, 1, "", "from_bytes"], [3, 3, 1, "", "from_json"], [3, 3, 1, "", "from_str"], [3, 3, 1, "", "to_json"]], "pyonear.crypto.Secp256K1SecretKey": [[3, 2, 1, "", "LENGTH"], [3, 3, 1, "", "from_bytes"], [3, 3, 1, "", "from_json"], [3, 3, 1, "", "from_random"], [3, 3, 1, "", "from_seed"], [3, 3, 1, "", "from_str"], [3, 3, 1, "", "public_key"], [3, 3, 1, "", "sign"], [3, 3, 1, "", "to_json"]], "pyonear.crypto.Secp256K1Signature": [[3, 2, 1, "", "LENGTH"], [3, 3, 1, "", "check_signature_values"], [3, 3, 1, "", "empty"], [3, 3, 1, "", "from_bytes"], [3, 3, 1, "", "from_json"], [3, 3, 1, "", "from_str"], [3, 3, 1, "", "recover"], [3, 3, 1, "", "to_json"], [3, 3, 1, "", "verify"]], "pyonear.crypto_hash": [[4, 1, 1, "", "CryptoHash"], [4, 4, 1, "", "crypto_hash"]], "pyonear.crypto_hash.CryptoHash": [[4, 3, 1, "", "default"], [4, 3, 1, "", "from_bytes"], [4, 3, 1, "", "from_json"], [4, 3, 1, "", "from_str"], [4, 3, 1, "", "hash_bytes"], [4, 3, 1, "", "to_json"], [4, 3, 1, "", "zero"]], "pyonear.error": [[5, 0, 0, "-", "core"], [6, 0, 0, "-", "exception"], [8, 0, 0, "-", "vm"]], "pyonear.error.core": [[5, 1, 1, "", "AccessKeyNotFound"], [5, 1, 1, "", "AccountAlreadyExists"], [5, 1, 1, "", "AccountDoesNotExist"], [5, 1, 1, "", "ActionError"], [5, 1, 1, "", "ActionsValidationErrorFieldless"], [5, 1, 1, "", "ActorNoPermission"], [5, 1, 1, "", "AddKeyAlreadyExists"], [5, 1, 1, "", "AddKeyMethodNameLengthExceeded"], [5, 1, 1, "", "AddKeyMethodNamesNumberOfBytesExceeded"], [5, 1, 1, "", "ContractSizeExceeded"], [5, 1, 1, "", "CreateAccountNotAllowed"], [5, 1, 1, "", "CreateAccountOnlyByRegistrar"], [5, 1, 1, "", "DeleteAccountStaking"], [5, 1, 1, "", "DeleteAccountWithLargeState"], [5, 1, 1, "", "DeleteKeyDoesNotExist"], [5, 1, 1, "", "FunctionCallArgumentsLengthExceeded"], [5, 1, 1, "", "FunctionCallMethodNameLengthExceeded"], [5, 1, 1, "", "InsufficientStake"], [5, 1, 1, "", "InvalidAccessKeyErrorFieldless"], [5, 1, 1, "", "InvalidAccountId"], [5, 1, 1, "", "InvalidDataReceiverId"], [5, 1, 1, "", "InvalidNonce"], [5, 1, 1, "", "InvalidPredecessorId"], [5, 1, 1, "", "InvalidReceiverId"], [5, 1, 1, "", "InvalidSignerId"], [5, 1, 1, "", "InvalidTxErrorFieldless"], [5, 1, 1, "", "LackBalanceForState"], [5, 1, 1, "", "MethodNameMismatch"], [5, 1, 1, "", "NonceTooLarge"], [5, 1, 1, "", "NotEnoughAllowance"], [5, 1, 1, "", "NotEnoughBalance"], [5, 1, 1, "", "NumberInputDataDependenciesExceeded"], [5, 1, 1, "", "OnlyImplicitAccountCreationAllowed"], [5, 1, 1, "", "ReceiptInvalidReceiverId"], [5, 1, 1, "", "ReceiptInvalidSignerId"], [5, 1, 1, "", "ReceiverMismatch"], [5, 1, 1, "", "ReturnedValueLengthExceeded"], [5, 1, 1, "", "SignerDoesNotExist"], [5, 1, 1, "", "TotalNumberOfActionsExceeded"], [5, 1, 1, "", "TotalPrepaidGasExceeded"], [5, 1, 1, "", "TransactionSizeExceeded"], [5, 1, 1, "", "TriesToStake"], [5, 1, 1, "", "TriesToUnstake"], [5, 1, 1, "", "UnsuitableStakingKey"]], "pyonear.error.core.AccessKeyNotFound": [[5, 2, 1, "", "account_id"], [5, 3, 1, "", "from_bytes"], [5, 3, 1, "", "from_json"], [5, 2, 1, "", "public_key"], [5, 3, 1, "", "to_json"]], "pyonear.error.core.AccountAlreadyExists": [[5, 2, 1, "", "account_id"], [5, 3, 1, "", "from_bytes"], [5, 3, 1, "", "from_json"], [5, 3, 1, "", "to_json"]], "pyonear.error.core.AccountDoesNotExist": [[5, 2, 1, "", "account_id"], [5, 3, 1, "", "from_bytes"], [5, 3, 1, "", "from_json"], [5, 3, 1, "", "to_json"]], "pyonear.error.core.ActionError": [[5, 3, 1, "", "from_bytes"], [5, 3, 1, "", "from_json"], [5, 2, 1, "", "index"], [5, 2, 1, "", "kind"], [5, 3, 1, "", "to_json"]], "pyonear.error.core.ActionsValidationErrorFieldless": [[5, 2, 1, "", "DeleteActionMustBeFinal"], [5, 2, 1, "", "FunctionCallZeroAttachedGas"], [5, 2, 1, "", "IntegerOverflow"]], "pyonear.error.core.ActorNoPermission": [[5, 2, 1, "", "account_id"], [5, 2, 1, "", "actor_id"], [5, 3, 1, "", "from_bytes"], [5, 3, 1, "", "from_json"], [5, 3, 1, "", "to_json"]], "pyonear.error.core.AddKeyAlreadyExists": [[5, 2, 1, "", "account_id"], [5, 3, 1, "", "from_bytes"], [5, 3, 1, "", "from_json"], [5, 2, 1, "", "public_key"], [5, 3, 1, "", "to_json"]], "pyonear.error.core.AddKeyMethodNameLengthExceeded": [[5, 3, 1, "", "from_bytes"], [5, 3, 1, "", "from_json"], [5, 2, 1, "", "length"], [5, 2, 1, "", "limit"], [5, 3, 1, "", "to_json"]], "pyonear.error.core.AddKeyMethodNamesNumberOfBytesExceeded": [[5, 3, 1, "", "from_bytes"], [5, 3, 1, "", "from_json"], [5, 2, 1, "", "limit"], [5, 3, 1, "", "to_json"], [5, 2, 1, "", "total_number_of_bytes"]], "pyonear.error.core.ContractSizeExceeded": [[5, 3, 1, "", "from_bytes"], [5, 3, 1, "", "from_json"], [5, 2, 1, "", "limit"], [5, 2, 1, "", "size"], [5, 3, 1, "", "to_json"]], "pyonear.error.core.CreateAccountNotAllowed": [[5, 2, 1, "", "account_id"], [5, 3, 1, "", "from_bytes"], [5, 3, 1, "", "from_json"], [5, 2, 1, "", "predecessor_id"], [5, 3, 1, "", "to_json"]], "pyonear.error.core.CreateAccountOnlyByRegistrar": [[5, 2, 1, "", "account_id"], [5, 3, 1, "", "from_bytes"], [5, 3, 1, "", "from_json"], [5, 2, 1, "", "predecessor_id"], [5, 2, 1, "", "registrar_account_id"], [5, 3, 1, "", "to_json"]], "pyonear.error.core.DeleteAccountStaking": [[5, 2, 1, "", "account_id"], [5, 3, 1, "", "from_bytes"], [5, 3, 1, "", "from_json"], [5, 3, 1, "", "to_json"]], "pyonear.error.core.DeleteAccountWithLargeState": [[5, 2, 1, "", "account_id"], [5, 3, 1, "", "from_bytes"], [5, 3, 1, "", "from_json"], [5, 3, 1, "", "to_json"]], "pyonear.error.core.DeleteKeyDoesNotExist": [[5, 2, 1, "", "account_id"], [5, 3, 1, "", "from_bytes"], [5, 3, 1, "", "from_json"], [5, 2, 1, "", "public_key"], [5, 3, 1, "", "to_json"]], "pyonear.error.core.FunctionCallArgumentsLengthExceeded": [[5, 3, 1, "", "from_bytes"], [5, 3, 1, "", "from_json"], [5, 2, 1, "", "length"], [5, 2, 1, "", "limit"], [5, 3, 1, "", "to_json"]], "pyonear.error.core.FunctionCallMethodNameLengthExceeded": [[5, 3, 1, "", "from_bytes"], [5, 3, 1, "", "from_json"], [5, 2, 1, "", "length"], [5, 2, 1, "", "limit"], [5, 3, 1, "", "to_json"]], "pyonear.error.core.InsufficientStake": [[5, 2, 1, "", "account_id"], [5, 3, 1, "", "from_bytes"], [5, 3, 1, "", "from_json"], [5, 2, 1, "", "minimum_stake"], [5, 2, 1, "", "stake"], [5, 3, 1, "", "to_json"]], "pyonear.error.core.InvalidAccessKeyErrorFieldless": [[5, 2, 1, "", "DepositWithFunctionCall"], [5, 2, 1, "", "RequiresFullAccess"]], "pyonear.error.core.InvalidAccountId": [[5, 2, 1, "", "account_id"], [5, 3, 1, "", "from_bytes"], [5, 3, 1, "", "from_json"], [5, 3, 1, "", "to_json"]], "pyonear.error.core.InvalidDataReceiverId": [[5, 2, 1, "", "account_id"], [5, 3, 1, "", "from_bytes"], [5, 3, 1, "", "from_json"], [5, 3, 1, "", "to_json"]], "pyonear.error.core.InvalidNonce": [[5, 2, 1, "", "ak_nonce"], [5, 3, 1, "", "from_bytes"], [5, 3, 1, "", "from_json"], [5, 3, 1, "", "to_json"], [5, 2, 1, "", "tx_nonce"]], "pyonear.error.core.InvalidPredecessorId": [[5, 2, 1, "", "account_id"], [5, 3, 1, "", "from_bytes"], [5, 3, 1, "", "from_json"], [5, 3, 1, "", "to_json"]], "pyonear.error.core.InvalidReceiverId": [[5, 3, 1, "", "from_bytes"], [5, 3, 1, "", "from_json"], [5, 2, 1, "", "receiver_id"], [5, 3, 1, "", "to_json"]], "pyonear.error.core.InvalidSignerId": [[5, 3, 1, "", "from_bytes"], [5, 3, 1, "", "from_json"], [5, 2, 1, "", "signer_id"], [5, 3, 1, "", "to_json"]], "pyonear.error.core.InvalidTxErrorFieldless": [[5, 2, 1, "", "CostOverflow"], [5, 2, 1, "", "Expired"], [5, 2, 1, "", "InvalidChain"], [5, 2, 1, "", "InvalidSignature"]], "pyonear.error.core.LackBalanceForState": [[5, 2, 1, "", "account_id"], [5, 2, 1, "", "amount"], [5, 3, 1, "", "from_bytes"], [5, 3, 1, "", "from_json"], [5, 3, 1, "", "to_json"]], "pyonear.error.core.MethodNameMismatch": [[5, 3, 1, "", "from_bytes"], [5, 3, 1, "", "from_json"], [5, 2, 1, "", "method_name"], [5, 3, 1, "", "to_json"]], "pyonear.error.core.NonceTooLarge": [[5, 3, 1, "", "from_bytes"], [5, 3, 1, "", "from_json"], [5, 3, 1, "", "to_json"], [5, 2, 1, "", "tx_nonce"], [5, 2, 1, "", "upper_bound"]], "pyonear.error.core.NotEnoughAllowance": [[5, 2, 1, "", "account_id"], [5, 2, 1, "", "allowance"], [5, 2, 1, "", "cost"], [5, 3, 1, "", "from_bytes"], [5, 3, 1, "", "from_json"], [5, 2, 1, "", "public_key"], [5, 3, 1, "", "to_json"]], "pyonear.error.core.NotEnoughBalance": [[5, 2, 1, "", "balance"], [5, 2, 1, "", "cost"], [5, 3, 1, "", "from_bytes"], [5, 3, 1, "", "from_json"], [5, 2, 1, "", "signer_id"], [5, 3, 1, "", "to_json"]], "pyonear.error.core.NumberInputDataDependenciesExceeded": [[5, 3, 1, "", "from_bytes"], [5, 3, 1, "", "from_json"], [5, 2, 1, "", "limit"], [5, 2, 1, "", "number_of_input_data_dependencies"], [5, 3, 1, "", "to_json"]], "pyonear.error.core.OnlyImplicitAccountCreationAllowed": [[5, 2, 1, "", "account_id"], [5, 3, 1, "", "from_bytes"], [5, 3, 1, "", "from_json"], [5, 3, 1, "", "to_json"]], "pyonear.error.core.ReceiptInvalidReceiverId": [[5, 2, 1, "", "account_id"], [5, 3, 1, "", "from_bytes"], [5, 3, 1, "", "from_json"], [5, 3, 1, "", "to_json"]], "pyonear.error.core.ReceiptInvalidSignerId": [[5, 2, 1, "", "account_id"], [5, 3, 1, "", "from_bytes"], [5, 3, 1, "", "from_json"], [5, 3, 1, "", "to_json"]], "pyonear.error.core.ReceiverMismatch": [[5, 2, 1, "", "ak_receiver"], [5, 3, 1, "", "from_bytes"], [5, 3, 1, "", "from_json"], [5, 3, 1, "", "to_json"], [5, 2, 1, "", "tx_receiver"]], "pyonear.error.core.ReturnedValueLengthExceeded": [[5, 3, 1, "", "from_bytes"], [5, 3, 1, "", "from_json"], [5, 2, 1, "", "length"], [5, 2, 1, "", "limit"], [5, 3, 1, "", "to_json"]], "pyonear.error.core.SignerDoesNotExist": [[5, 3, 1, "", "from_bytes"], [5, 3, 1, "", "from_json"], [5, 2, 1, "", "signer_id"], [5, 3, 1, "", "to_json"]], "pyonear.error.core.TotalNumberOfActionsExceeded": [[5, 3, 1, "", "from_bytes"], [5, 3, 1, "", "from_json"], [5, 2, 1, "", "limit"], [5, 3, 1, "", "to_json"], [5, 2, 1, "", "total_number_of_actions"]], "pyonear.error.core.TotalPrepaidGasExceeded": [[5, 3, 1, "", "from_bytes"], [5, 3, 1, "", "from_json"], [5, 2, 1, "", "limit"], [5, 3, 1, "", "to_json"], [5, 2, 1, "", "total_prepaid_gas"]], "pyonear.error.core.TransactionSizeExceeded": [[5, 3, 1, "", "from_bytes"], [5, 3, 1, "", "from_json"], [5, 2, 1, "", "limit"], [5, 2, 1, "", "size"], [5, 3, 1, "", "to_json"]], "pyonear.error.core.TriesToStake": [[5, 2, 1, "", "account_id"], [5, 2, 1, "", "balance"], [5, 3, 1, "", "from_bytes"], [5, 3, 1, "", "from_json"], [5, 2, 1, "", "locked"], [5, 2, 1, "", "stake"], [5, 3, 1, "", "to_json"]], "pyonear.error.core.TriesToUnstake": [[5, 2, 1, "", "account_id"], [5, 3, 1, "", "from_bytes"], [5, 3, 1, "", "from_json"], [5, 3, 1, "", "to_json"]], "pyonear.error.core.UnsuitableStakingKey": [[5, 3, 1, "", "from_bytes"], [5, 3, 1, "", "from_json"], [5, 2, 1, "", "public_key"], [5, 3, 1, "", "to_json"]], "pyonear.error.exception": [[6, 5, 1, "", "ParseKeyError"], [6, 5, 1, "", "ParseSignatureError"], [6, 5, 1, "", "Secp256K1Error"], [6, 5, 1, "", "TryFromSliceError"]], "pyonear.error.vm": [[8, 1, 1, "", "AltBn128InvalidInput"], [8, 1, 1, "", "CacheErrorFieldless"], [8, 1, 1, "", "CodeDoesNotExist"], [8, 1, 1, "", "ContractSizeExceeded"], [8, 1, 1, "", "Deprecated"], [8, 1, 1, "", "ECRecoverError"], [8, 1, 1, "", "Ed25519VerifyInvalidInput"], [8, 1, 1, "", "FunctionCallErrorSerFieldless"], [8, 1, 1, "", "GuestPanic"], [8, 1, 1, "", "HostErrorFieldless"], [8, 1, 1, "", "InvalidIteratorIndex"], [8, 1, 1, "", "InvalidPromiseIndex"], [8, 1, 1, "", "InvalidPromiseResultIndex"], [8, 1, 1, "", "InvalidReceiptIndex"], [8, 1, 1, "", "InvalidRegisterId"], [8, 1, 1, "", "IteratorWasInvalidated"], [8, 1, 1, "", "KeyLengthExceeded"], [8, 1, 1, "", "LinkError"], [8, 1, 1, "", "MethodResolveError"], [8, 1, 1, "", "NumberInputDataDependenciesExceeded"], [8, 1, 1, "", "NumberOfLogsExceeded"], [8, 1, 1, "", "NumberPromisesExceeded"], [8, 1, 1, "", "PrepareError"], [8, 1, 1, "", "ProhibitedInView"], [8, 1, 1, "", "ReturnedValueLengthExceeded"], [8, 1, 1, "", "SerializationError"], [8, 1, 1, "", "TotalLogLengthExceeded"], [8, 1, 1, "", "UnsupportedCompiler"], [8, 1, 1, "", "ValueLengthExceeded"], [8, 1, 1, "", "WasmTrap"], [8, 1, 1, "", "WasmerCompileError"]], "pyonear.error.vm.AltBn128InvalidInput": [[8, 3, 1, "", "from_bytes"], [8, 3, 1, "", "from_json"], [8, 2, 1, "", "msg"], [8, 3, 1, "", "to_json"]], "pyonear.error.vm.CacheErrorFieldless": [[8, 2, 1, "", "DeserializationError"], [8, 2, 1, "", "ReadError"], [8, 2, 1, "", "WriteError"]], "pyonear.error.vm.CodeDoesNotExist": [[8, 2, 1, "", "account_id"], [8, 3, 1, "", "from_bytes"], [8, 3, 1, "", "from_json"], [8, 3, 1, "", "to_json"]], "pyonear.error.vm.ContractSizeExceeded": [[8, 3, 1, "", "from_bytes"], [8, 3, 1, "", "from_json"], [8, 2, 1, "", "limit"], [8, 2, 1, "", "size"], [8, 3, 1, "", "to_json"]], "pyonear.error.vm.Deprecated": [[8, 3, 1, "", "from_bytes"], [8, 3, 1, "", "from_json"], [8, 2, 1, "", "method_name"], [8, 3, 1, "", "to_json"]], "pyonear.error.vm.ECRecoverError": [[8, 3, 1, "", "from_bytes"], [8, 3, 1, "", "from_json"], [8, 2, 1, "", "msg"], [8, 3, 1, "", "to_json"]], "pyonear.error.vm.Ed25519VerifyInvalidInput": [[8, 3, 1, "", "from_bytes"], [8, 3, 1, "", "from_json"], [8, 2, 1, "", "msg"], [8, 3, 1, "", "to_json"]], "pyonear.error.vm.FunctionCallErrorSerFieldless": [[8, 2, 1, "", "WasmUnknownError"]], "pyonear.error.vm.GuestPanic": [[8, 3, 1, "", "from_bytes"], [8, 3, 1, "", "from_json"], [8, 2, 1, "", "panic_msg"], [8, 3, 1, "", "to_json"]], "pyonear.error.vm.HostErrorFieldless": [[8, 2, 1, "", "BadUTF16"], [8, 2, 1, "", "BadUTF8"], [8, 2, 1, "", "BalanceExceeded"], [8, 2, 1, "", "CannotAppendActionToJointPromise"], [8, 2, 1, "", "CannotReturnJointPromise"], [8, 2, 1, "", "EmptyMethodName"], [8, 2, 1, "", "GasExceeded"], [8, 2, 1, "", "GasLimitExceeded"], [8, 2, 1, "", "IntegerOverflow"], [8, 2, 1, "", "InvalidAccountId"], [8, 2, 1, "", "InvalidMethodName"], [8, 2, 1, "", "InvalidPublicKey"], [8, 2, 1, "", "MemoryAccessViolation"]], "pyonear.error.vm.InvalidIteratorIndex": [[8, 3, 1, "", "from_bytes"], [8, 3, 1, "", "from_json"], [8, 2, 1, "", "iterator_index"], [8, 3, 1, "", "to_json"]], "pyonear.error.vm.InvalidPromiseIndex": [[8, 3, 1, "", "from_bytes"], [8, 3, 1, "", "from_json"], [8, 2, 1, "", "promise_idx"], [8, 3, 1, "", "to_json"]], "pyonear.error.vm.InvalidPromiseResultIndex": [[8, 3, 1, "", "from_bytes"], [8, 3, 1, "", "from_json"], [8, 2, 1, "", "result_idx"], [8, 3, 1, "", "to_json"]], "pyonear.error.vm.InvalidReceiptIndex": [[8, 3, 1, "", "from_bytes"], [8, 3, 1, "", "from_json"], [8, 2, 1, "", "receipt_index"], [8, 3, 1, "", "to_json"]], "pyonear.error.vm.InvalidRegisterId": [[8, 3, 1, "", "from_bytes"], [8, 3, 1, "", "from_json"], [8, 2, 1, "", "register_id"], [8, 3, 1, "", "to_json"]], "pyonear.error.vm.IteratorWasInvalidated": [[8, 3, 1, "", "from_bytes"], [8, 3, 1, "", "from_json"], [8, 2, 1, "", "iterator_index"], [8, 3, 1, "", "to_json"]], "pyonear.error.vm.KeyLengthExceeded": [[8, 3, 1, "", "from_bytes"], [8, 3, 1, "", "from_json"], [8, 2, 1, "", "length"], [8, 2, 1, "", "limit"], [8, 3, 1, "", "to_json"]], "pyonear.error.vm.LinkError": [[8, 3, 1, "", "from_bytes"], [8, 3, 1, "", "from_json"], [8, 2, 1, "", "msg"], [8, 3, 1, "", "to_json"]], "pyonear.error.vm.MethodResolveError": [[8, 2, 1, "", "MethodEmptyName"], [8, 2, 1, "", "MethodInvalidSignature"], [8, 2, 1, "", "MethodNotFound"]], "pyonear.error.vm.NumberInputDataDependenciesExceeded": [[8, 3, 1, "", "from_bytes"], [8, 3, 1, "", "from_json"], [8, 2, 1, "", "limit"], [8, 2, 1, "", "number_of_input_data_dependencies"], [8, 3, 1, "", "to_json"]], "pyonear.error.vm.NumberOfLogsExceeded": [[8, 3, 1, "", "from_bytes"], [8, 3, 1, "", "from_json"], [8, 2, 1, "", "limit"], [8, 3, 1, "", "to_json"]], "pyonear.error.vm.NumberPromisesExceeded": [[8, 3, 1, "", "from_bytes"], [8, 3, 1, "", "from_json"], [8, 2, 1, "", "limit"], [8, 2, 1, "", "number_of_promises"], [8, 3, 1, "", "to_json"]], "pyonear.error.vm.PrepareError": [[8, 2, 1, "", "Deserialization"], [8, 2, 1, "", "GasInstrumentation"], [8, 2, 1, "", "Instantiate"], [8, 2, 1, "", "InternalMemoryDeclared"], [8, 2, 1, "", "Memory"], [8, 2, 1, "", "Serialization"], [8, 2, 1, "", "StackHeightInstrumentation"]], "pyonear.error.vm.ProhibitedInView": [[8, 3, 1, "", "from_bytes"], [8, 3, 1, "", "from_json"], [8, 2, 1, "", "method_name"], [8, 3, 1, "", "to_json"]], "pyonear.error.vm.ReturnedValueLengthExceeded": [[8, 3, 1, "", "from_bytes"], [8, 3, 1, "", "from_json"], [8, 2, 1, "", "length"], [8, 2, 1, "", "limit"], [8, 3, 1, "", "to_json"]], "pyonear.error.vm.SerializationError": [[8, 3, 1, "", "from_bytes"], [8, 3, 1, "", "from_json"], [8, 2, 1, "", "hash"], [8, 3, 1, "", "to_json"]], "pyonear.error.vm.TotalLogLengthExceeded": [[8, 3, 1, "", "from_bytes"], [8, 3, 1, "", "from_json"], [8, 2, 1, "", "length"], [8, 2, 1, "", "limit"], [8, 3, 1, "", "to_json"]], "pyonear.error.vm.UnsupportedCompiler": [[8, 3, 1, "", "from_bytes"], [8, 3, 1, "", "from_json"], [8, 2, 1, "", "msg"], [8, 3, 1, "", "to_json"]], "pyonear.error.vm.ValueLengthExceeded": [[8, 3, 1, "", "from_bytes"], [8, 3, 1, "", "from_json"], [8, 2, 1, "", "length"], [8, 2, 1, "", "limit"], [8, 3, 1, "", "to_json"]], "pyonear.error.vm.WasmTrap": [[8, 2, 1, "", "CallIndirectOOB"], [8, 2, 1, "", "GenericTrap"], [8, 2, 1, "", "IllegalArithmetic"], [8, 2, 1, "", "IncorrectCallIndirectSignature"], [8, 2, 1, "", "IndirectCallToNull"], [8, 2, 1, "", "MemoryOutOfBounds"], [8, 2, 1, "", "MisalignedAtomicAccess"], [8, 2, 1, "", "StackOverflow"], [8, 2, 1, "", "Unreachable"]], "pyonear.error.vm.WasmerCompileError": [[8, 3, 1, "", "from_bytes"], [8, 3, 1, "", "from_json"], [8, 2, 1, "", "msg"], [8, 3, 1, "", "to_json"]], "pyonear.merkle": [[10, 1, 1, "", "Direction"], [10, 1, 1, "", "MerklePathItem"]], "pyonear.merkle.Direction": [[10, 2, 1, "", "Left"], [10, 2, 1, "", "Right"]], "pyonear.merkle.MerklePathItem": [[10, 2, 1, "", "direction"], [10, 3, 1, "", "from_bytes"], [10, 3, 1, "", "from_json"], [10, 2, 1, "", "hash"], [10, 3, 1, "", "to_json"]], "pyonear.transaction": [[11, 1, 1, "", "AddKeyAction"], [11, 1, 1, "", "CreateAccountAction"], [11, 1, 1, "", "DeleteAccountAction"], [11, 1, 1, "", "DeleteKeyAction"], [11, 1, 1, "", "DeployContractAction"], [11, 1, 1, "", "ExecutionMetadataFieldless"], [11, 1, 1, "", "ExecutionOutcome"], [11, 1, 1, "", "ExecutionOutcomeWithId"], [11, 1, 1, "", "ExecutionOutcomeWithIdAndProof"], [11, 1, 1, "", "ExecutionStatusFieldless"], [11, 1, 1, "", "FunctionCallAction"], [11, 1, 1, "", "PartialExecutionStatusFieldless"], [11, 1, 1, "", "ProfileData"], [11, 1, 1, "", "SignedTransaction"], [11, 1, 1, "", "StakeAction"], [11, 1, 1, "", "Transaction"], [11, 1, 1, "", "TransferAction"], [11, 4, 1, "", "verify_transaction_signature"]], "pyonear.transaction.AddKeyAction": [[11, 2, 1, "", "access_key"], [11, 3, 1, "", "from_bytes"], [11, 3, 1, "", "from_json"], [11, 2, 1, "", "public_key"], [11, 3, 1, "", "to_json"]], "pyonear.transaction.CreateAccountAction": [[11, 3, 1, "", "from_bytes"], [11, 3, 1, "", "from_json"], [11, 3, 1, "", "to_json"]], "pyonear.transaction.DeleteAccountAction": [[11, 2, 1, "", "beneficiary_id"], [11, 3, 1, "", "from_bytes"], [11, 3, 1, "", "from_json"], [11, 3, 1, "", "to_json"]], "pyonear.transaction.DeleteKeyAction": [[11, 3, 1, "", "from_bytes"], [11, 3, 1, "", "from_json"], [11, 2, 1, "", "public_key"], [11, 3, 1, "", "to_json"]], "pyonear.transaction.DeployContractAction": [[11, 2, 1, "", "code"], [11, 3, 1, "", "from_bytes"], [11, 3, 1, "", "from_json"], [11, 3, 1, "", "to_json"]], "pyonear.transaction.ExecutionMetadataFieldless": [[11, 2, 1, "", "V1"]], "pyonear.transaction.ExecutionOutcome": [[11, 2, 1, "", "executor_id"], [11, 3, 1, "", "from_bytes"], [11, 2, 1, "", "gas_burnt"], [11, 2, 1, "", "logs"], [11, 2, 1, "", "metadata"], [11, 2, 1, "", "receipt_ids"], [11, 2, 1, "", "status"], [11, 2, 1, "", "tokens_burnt"]], "pyonear.transaction.ExecutionOutcomeWithId": [[11, 3, 1, "", "from_bytes"], [11, 2, 1, "", "id"], [11, 2, 1, "", "outcome"], [11, 3, 1, "", "to_hashes"]], "pyonear.transaction.ExecutionOutcomeWithIdAndProof": [[11, 2, 1, "", "block_hash"], [11, 3, 1, "", "from_bytes"], [11, 3, 1, "", "id"], [11, 2, 1, "", "outcome_with_id"], [11, 2, 1, "", "proof"]], "pyonear.transaction.ExecutionStatusFieldless": [[11, 2, 1, "", "Unknown"]], "pyonear.transaction.FunctionCallAction": [[11, 2, 1, "", "args"], [11, 2, 1, "", "deposit"], [11, 3, 1, "", "from_bytes"], [11, 3, 1, "", "from_json"], [11, 2, 1, "", "gas"], [11, 2, 1, "", "method_name"], [11, 3, 1, "", "to_json"]], "pyonear.transaction.PartialExecutionStatusFieldless": [[11, 2, 1, "", "Failure"], [11, 2, 1, "", "Unknown"]], "pyonear.transaction.ProfileData": [[11, 3, 1, "", "action_gas"], [11, 3, 1, "", "add_action_cost"], [11, 3, 1, "", "add_ext_cost"], [11, 3, 1, "", "compute_wasm_instruction_cost"], [11, 3, 1, "", "from_bytes"], [11, 3, 1, "", "get_action_cost"], [11, 3, 1, "", "get_ext_cost"], [11, 3, 1, "", "host_gas"], [11, 3, 1, "", "merge"]], "pyonear.transaction.SignedTransaction": [[11, 3, 1, "", "from_base64"], [11, 3, 1, "", "from_bytes"], [11, 3, 1, "", "from_json"], [11, 2, 1, "", "hash"], [11, 2, 1, "", "signature"], [11, 2, 1, "", "size"], [11, 3, 1, "", "to_base64"], [11, 3, 1, "", "to_json"], [11, 2, 1, "", "transaction"]], "pyonear.transaction.StakeAction": [[11, 3, 1, "", "from_bytes"], [11, 3, 1, "", "from_json"], [11, 2, 1, "", "public_key"], [11, 2, 1, "", "stake"], [11, 3, 1, "", "to_json"]], "pyonear.transaction.Transaction": [[11, 2, 1, "", "actions"], [11, 3, 1, "", "add_key"], [11, 2, 1, "", "block_hash"], [11, 3, 1, "", "create_account"], [11, 3, 1, "", "delete_account"], [11, 3, 1, "", "delete_key"], [11, 3, 1, "", "deploy_contract"], [11, 3, 1, "", "from_bytes"], [11, 3, 1, "", "from_json"], [11, 3, 1, "", "function_call"], [11, 3, 1, "", "get_hash_and_size"], [11, 2, 1, "", "nonce"], [11, 2, 1, "", "public_key"], [11, 2, 1, "", "receiver_id"], [11, 3, 1, "", "sign"], [11, 2, 1, "", "signer_id"], [11, 3, 1, "", "stake"], [11, 3, 1, "", "to_json"], [11, 3, 1, "", "transfer"]], "pyonear.transaction.TransferAction": [[11, 2, 1, "", "deposit"], [11, 3, 1, "", "from_bytes"], [11, 3, 1, "", "from_json"], [11, 3, 1, "", "to_json"]]}, "objtypes": {"0": "py:module", "1": "py:class", "2": "py:attribute", "3": "py:method", "4": "py:function", "5": "py:exception"}, "objnames": {"0": ["py", "module", "Python module"], "1": ["py", "class", "Python class"], "2": ["py", "attribute", "Python attribute"], "3": ["py", "method", "Python method"], "4": ["py", "function", "Python function"], "5": ["py", "exception", "Python exception"]}, "titleterms": {"account": [0, 12], "account_id": 1, "config": 2, "crypto": 3, "crypto_hash": 4, "core": 5, "except": 6, "error": 7, "vm": 8, "api": 9, "refer": 9, "merkl": 10, "transact": [11, 12], "exampl": [12, 13], "creat": 12, "serial": 12, "deseri": 12, "an": 12, "save": 12, "kei": 12, "file": 12, "verifi": 12, "signatur": 12, "multipl": 12, "action": 12, "one": 12, "pyonear": 13, "instal": 13, "usag": 13, "content": 13}, "envversion": {"sphinx.domains.c": 2, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 8, "sphinx.domains.index": 1, "sphinx.domains.javascript": 2, "sphinx.domains.math": 2, "sphinx.domains.python": 3, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx": 57}, "alltitles": {"account": [[0, "module-pyonear.account"]], "account_id": [[1, "module-pyonear.account_id"]], "config": [[2, "module-pyonear.config"]], "crypto": [[3, "module-pyonear.crypto"]], "crypto_hash": [[4, "module-pyonear.crypto_hash"]], "core": [[5, "module-pyonear.error.core"]], "exception": [[6, "module-pyonear.error.exception"]], "error": [[7, "error"]], "vm": [[8, "module-pyonear.error.vm"]], "API Reference": [[9, "api-reference"]], "merkle": [[10, "module-pyonear.merkle"]], "transaction": [[11, "module-pyonear.transaction"]], "Examples": [[12, "examples"]], "Create and serialize a transaction": [[12, "create-and-serialize-a-transaction"]], "Serialize and deserialize an account": [[12, "serialize-and-deserialize-an-account"]], "Save keys to a file": [[12, "save-keys-to-a-file"]], "Verify a signature": [[12, "verify-a-signature"]], "Multiple actions in one transaction": [[12, "multiple-actions-in-one-transaction"]], "pyonear": [[13, "pyonear"]], "Installation": [[13, "installation"]], "Example Usage": [[13, "example-usage"]], "Contents:": [[13, null]]}, "indexentries": {"access_key_nonce_range_multiplier (accesskey attribute)": [[0, "pyonear.account.AccessKey.ACCESS_KEY_NONCE_RANGE_MULTIPLIER"]], "accesskey (class in pyonear.account)": [[0, "pyonear.account.AccessKey"]], "accesskeypermissionfieldless (class in pyonear.account)": [[0, "pyonear.account.AccessKeyPermissionFieldless"]], "account (class in pyonear.account)": [[0, "pyonear.account.Account"]], "accountversion (class in pyonear.account)": [[0, "pyonear.account.AccountVersion"]], "fullaccess (accesskeypermissionfieldless attribute)": [[0, "pyonear.account.AccessKeyPermissionFieldless.FullAccess"]], "functioncallpermission (class in pyonear.account)": [[0, "pyonear.account.FunctionCallPermission"]], "max_account_deletion_storage_usage (account attribute)": [[0, "pyonear.account.Account.MAX_ACCOUNT_DELETION_STORAGE_USAGE"]], "v1 (accountversion attribute)": [[0, "pyonear.account.AccountVersion.V1"]], "allowance (functioncallpermission attribute)": [[0, "pyonear.account.FunctionCallPermission.allowance"]], "amount (account attribute)": [[0, "pyonear.account.Account.amount"]], "code_hash (account attribute)": [[0, "pyonear.account.Account.code_hash"]], "from_bytes() (accesskey static method)": [[0, "pyonear.account.AccessKey.from_bytes"]], "from_bytes() (account static method)": [[0, "pyonear.account.Account.from_bytes"]], "from_bytes() (functioncallpermission static method)": [[0, "pyonear.account.FunctionCallPermission.from_bytes"]], "from_json() (accesskey static method)": [[0, "pyonear.account.AccessKey.from_json"]], "from_json() (account static method)": [[0, "pyonear.account.Account.from_json"]], "from_json() (functioncallpermission static method)": [[0, "pyonear.account.FunctionCallPermission.from_json"]], "full_access() (accesskey static method)": [[0, "pyonear.account.AccessKey.full_access"]], "locked (account attribute)": [[0, "pyonear.account.Account.locked"]], "method_names (functioncallpermission attribute)": [[0, "pyonear.account.FunctionCallPermission.method_names"]], "module": [[0, "module-pyonear.account"], [1, "module-pyonear.account_id"], [2, "module-pyonear.config"], [3, "module-pyonear.crypto"], [4, "module-pyonear.crypto_hash"], [5, "module-pyonear.error.core"], [6, "module-pyonear.error.exception"], [8, "module-pyonear.error.vm"], [10, "module-pyonear.merkle"], [11, "module-pyonear.transaction"]], "nonce (accesskey attribute)": [[0, "pyonear.account.AccessKey.nonce"]], "permission (accesskey attribute)": [[0, "pyonear.account.AccessKey.permission"]], "pyonear.account": [[0, "module-pyonear.account"]], "receiver_id (functioncallpermission attribute)": [[0, "pyonear.account.FunctionCallPermission.receiver_id"]], "storage_usage (account attribute)": [[0, "pyonear.account.Account.storage_usage"]], "to_json() (accesskey method)": [[0, "pyonear.account.AccessKey.to_json"]], "to_json() (account method)": [[0, "pyonear.account.Account.to_json"]], "to_json() (functioncallpermission method)": [[0, "pyonear.account.FunctionCallPermission.to_json"]], "version (account attribute)": [[0, "pyonear.account.Account.version"]], "accountid (class in pyonear.account_id)": [[1, "pyonear.account_id.AccountId"]], "max_len (accountid attribute)": [[1, "pyonear.account_id.AccountId.MAX_LEN"]], "min_len (accountid attribute)": [[1, "pyonear.account_id.AccountId.MIN_LEN"]], "from_bytes() (accountid static method)": [[1, "pyonear.account_id.AccountId.from_bytes"]], "from_json() (accountid static method)": [[1, "pyonear.account_id.AccountId.from_json"]], "is_implicit() (accountid method)": [[1, "pyonear.account_id.AccountId.is_implicit"]], "is_sub_account_of() (accountid method)": [[1, "pyonear.account_id.AccountId.is_sub_account_of"]], "is_system() (accountid method)": [[1, "pyonear.account_id.AccountId.is_system"]], "is_top_level() (accountid method)": [[1, "pyonear.account_id.AccountId.is_top_level"]], "pyonear.account_id": [[1, "module-pyonear.account_id"]], "to_json() (accountid method)": [[1, "pyonear.account_id.AccountId.to_json"]], "validate() (accountid static method)": [[1, "pyonear.account_id.AccountId.validate"]], "actioncosts (class in pyonear.config)": [[2, "pyonear.config.ActionCosts"]], "extcosts (class in pyonear.config)": [[2, "pyonear.config.ExtCosts"]], "add_key (actioncosts attribute)": [[2, "pyonear.config.ActionCosts.add_key"]], "alt_bn128_g1_multiexp_base (extcosts attribute)": [[2, "pyonear.config.ExtCosts.alt_bn128_g1_multiexp_base"]], "alt_bn128_g1_multiexp_element (extcosts attribute)": [[2, "pyonear.config.ExtCosts.alt_bn128_g1_multiexp_element"]], "alt_bn128_g1_sum_base (extcosts attribute)": [[2, "pyonear.config.ExtCosts.alt_bn128_g1_sum_base"]], "alt_bn128_g1_sum_element (extcosts attribute)": [[2, "pyonear.config.ExtCosts.alt_bn128_g1_sum_element"]], "alt_bn128_pairing_check_base (extcosts attribute)": [[2, "pyonear.config.ExtCosts.alt_bn128_pairing_check_base"]], "alt_bn128_pairing_check_element (extcosts attribute)": [[2, "pyonear.config.ExtCosts.alt_bn128_pairing_check_element"]], "base (extcosts attribute)": [[2, "pyonear.config.ExtCosts.base"]], "contract_loading_base (extcosts attribute)": [[2, "pyonear.config.ExtCosts.contract_loading_base"]], "contract_loading_bytes (extcosts attribute)": [[2, "pyonear.config.ExtCosts.contract_loading_bytes"]], "create_account (actioncosts attribute)": [[2, "pyonear.config.ActionCosts.create_account"]], "delete_account (actioncosts attribute)": [[2, "pyonear.config.ActionCosts.delete_account"]], "delete_key (actioncosts attribute)": [[2, "pyonear.config.ActionCosts.delete_key"]], "deploy_contract (actioncosts attribute)": [[2, "pyonear.config.ActionCosts.deploy_contract"]], "ecrecover_base (extcosts attribute)": [[2, "pyonear.config.ExtCosts.ecrecover_base"]], "ed25519_verify_base (extcosts attribute)": [[2, "pyonear.config.ExtCosts.ed25519_verify_base"]], "ed25519_verify_byte (extcosts attribute)": [[2, "pyonear.config.ExtCosts.ed25519_verify_byte"]], "function_call (actioncosts attribute)": [[2, "pyonear.config.ActionCosts.function_call"]], "keccak256_base (extcosts attribute)": [[2, "pyonear.config.ExtCosts.keccak256_base"]], "keccak256_byte (extcosts attribute)": [[2, "pyonear.config.ExtCosts.keccak256_byte"]], "keccak512_base (extcosts attribute)": [[2, "pyonear.config.ExtCosts.keccak512_base"]], "keccak512_byte (extcosts attribute)": [[2, "pyonear.config.ExtCosts.keccak512_byte"]], "log_base (extcosts attribute)": [[2, "pyonear.config.ExtCosts.log_base"]], "log_byte (extcosts attribute)": [[2, "pyonear.config.ExtCosts.log_byte"]], "new_receipt (actioncosts attribute)": [[2, "pyonear.config.ActionCosts.new_receipt"]], "promise_and_base (extcosts attribute)": [[2, "pyonear.config.ExtCosts.promise_and_base"]], "promise_and_per_promise (extcosts attribute)": [[2, "pyonear.config.ExtCosts.promise_and_per_promise"]], "promise_return (extcosts attribute)": [[2, "pyonear.config.ExtCosts.promise_return"]], "pyonear.config": [[2, "module-pyonear.config"]], "read_cached_trie_node (extcosts attribute)": [[2, "pyonear.config.ExtCosts.read_cached_trie_node"]], "read_memory_base (extcosts attribute)": [[2, "pyonear.config.ExtCosts.read_memory_base"]], "read_memory_byte (extcosts attribute)": [[2, "pyonear.config.ExtCosts.read_memory_byte"]], "read_register_base (extcosts attribute)": [[2, "pyonear.config.ExtCosts.read_register_base"]], "read_register_byte (extcosts attribute)": [[2, "pyonear.config.ExtCosts.read_register_byte"]], "ripemd160_base (extcosts attribute)": [[2, "pyonear.config.ExtCosts.ripemd160_base"]], "ripemd160_block (extcosts attribute)": [[2, "pyonear.config.ExtCosts.ripemd160_block"]], "sha256_base (extcosts attribute)": [[2, "pyonear.config.ExtCosts.sha256_base"]], "sha256_byte (extcosts attribute)": [[2, "pyonear.config.ExtCosts.sha256_byte"]], "stake (actioncosts attribute)": [[2, "pyonear.config.ActionCosts.stake"]], "storage_has_key_base (extcosts attribute)": [[2, "pyonear.config.ExtCosts.storage_has_key_base"]], "storage_has_key_byte (extcosts attribute)": [[2, "pyonear.config.ExtCosts.storage_has_key_byte"]], "storage_iter_create_from_byte (extcosts attribute)": [[2, "pyonear.config.ExtCosts.storage_iter_create_from_byte"]], "storage_iter_create_prefix_base (extcosts attribute)": [[2, "pyonear.config.ExtCosts.storage_iter_create_prefix_base"]], "storage_iter_create_prefix_byte (extcosts attribute)": [[2, "pyonear.config.ExtCosts.storage_iter_create_prefix_byte"]], "storage_iter_create_range_base (extcosts attribute)": [[2, "pyonear.config.ExtCosts.storage_iter_create_range_base"]], "storage_iter_create_to_byte (extcosts attribute)": [[2, "pyonear.config.ExtCosts.storage_iter_create_to_byte"]], "storage_iter_next_base (extcosts attribute)": [[2, "pyonear.config.ExtCosts.storage_iter_next_base"]], "storage_iter_next_key_byte (extcosts attribute)": [[2, "pyonear.config.ExtCosts.storage_iter_next_key_byte"]], "storage_iter_next_value_byte (extcosts attribute)": [[2, "pyonear.config.ExtCosts.storage_iter_next_value_byte"]], "storage_read_base (extcosts attribute)": [[2, "pyonear.config.ExtCosts.storage_read_base"]], "storage_read_key_byte (extcosts attribute)": [[2, "pyonear.config.ExtCosts.storage_read_key_byte"]], "storage_read_value_byte (extcosts attribute)": [[2, "pyonear.config.ExtCosts.storage_read_value_byte"]], "storage_remove_base (extcosts attribute)": [[2, "pyonear.config.ExtCosts.storage_remove_base"]], "storage_remove_key_byte (extcosts attribute)": [[2, "pyonear.config.ExtCosts.storage_remove_key_byte"]], "storage_remove_ret_value_byte (extcosts attribute)": [[2, "pyonear.config.ExtCosts.storage_remove_ret_value_byte"]], "storage_write_base (extcosts attribute)": [[2, "pyonear.config.ExtCosts.storage_write_base"]], "storage_write_evicted_byte (extcosts attribute)": [[2, "pyonear.config.ExtCosts.storage_write_evicted_byte"]], "storage_write_key_byte (extcosts attribute)": [[2, "pyonear.config.ExtCosts.storage_write_key_byte"]], "storage_write_value_byte (extcosts attribute)": [[2, "pyonear.config.ExtCosts.storage_write_value_byte"]], "touching_trie_node (extcosts attribute)": [[2, "pyonear.config.ExtCosts.touching_trie_node"]], "transfer (actioncosts attribute)": [[2, "pyonear.config.ActionCosts.transfer"]], "utf16_decoding_base (extcosts attribute)": [[2, "pyonear.config.ExtCosts.utf16_decoding_base"]], "utf16_decoding_byte (extcosts attribute)": [[2, "pyonear.config.ExtCosts.utf16_decoding_byte"]], "utf8_decoding_base (extcosts attribute)": [[2, "pyonear.config.ExtCosts.utf8_decoding_base"]], "utf8_decoding_byte (extcosts attribute)": [[2, "pyonear.config.ExtCosts.utf8_decoding_byte"]], "validator_stake_base (extcosts attribute)": [[2, "pyonear.config.ExtCosts.validator_stake_base"]], "validator_total_stake_base (extcosts attribute)": [[2, "pyonear.config.ExtCosts.validator_total_stake_base"]], "value_return (actioncosts attribute)": [[2, "pyonear.config.ActionCosts.value_return"]], "write_memory_base (extcosts attribute)": [[2, "pyonear.config.ExtCosts.write_memory_base"]], "write_memory_byte (extcosts attribute)": [[2, "pyonear.config.ExtCosts.write_memory_byte"]], "write_register_base (extcosts attribute)": [[2, "pyonear.config.ExtCosts.write_register_base"]], "write_register_byte (extcosts attribute)": [[2, "pyonear.config.ExtCosts.write_register_byte"]], "ed25519 (keytype attribute)": [[3, "pyonear.crypto.KeyType.ED25519"]], "ed25519publickey (class in pyonear.crypto)": [[3, "pyonear.crypto.ED25519PublicKey"]], "ed25519secretkey (class in pyonear.crypto)": [[3, "pyonear.crypto.ED25519SecretKey"]], "ed25519signature (class in pyonear.crypto)": [[3, "pyonear.crypto.ED25519Signature"]], "emptysigner (class in pyonear.crypto)": [[3, "pyonear.crypto.EmptySigner"]], "inmemorysigner (class in pyonear.crypto)": [[3, "pyonear.crypto.InMemorySigner"]], "keyfile (class in pyonear.crypto)": [[3, "pyonear.crypto.KeyFile"]], "keytype (class in pyonear.crypto)": [[3, "pyonear.crypto.KeyType"]], "length (ed25519publickey attribute)": [[3, "pyonear.crypto.ED25519PublicKey.LENGTH"]], "length (ed25519secretkey attribute)": [[3, "pyonear.crypto.ED25519SecretKey.LENGTH"]], "length (ed25519signature attribute)": [[3, "pyonear.crypto.ED25519Signature.LENGTH"]], "length (secp256k1publickey attribute)": [[3, "pyonear.crypto.Secp256K1PublicKey.LENGTH"]], "length (secp256k1secretkey attribute)": [[3, "pyonear.crypto.Secp256K1SecretKey.LENGTH"]], "length (secp256k1signature attribute)": [[3, "pyonear.crypto.Secp256K1Signature.LENGTH"]], "secp256k1 (keytype attribute)": [[3, "pyonear.crypto.KeyType.SECP256K1"]], "secp256k1publickey (class in pyonear.crypto)": [[3, "pyonear.crypto.Secp256K1PublicKey"]], "secp256k1secretkey (class in pyonear.crypto)": [[3, "pyonear.crypto.Secp256K1SecretKey"]], "secp256k1signature (class in pyonear.crypto)": [[3, "pyonear.crypto.Secp256K1Signature"]], "account_id (inmemorysigner attribute)": [[3, "pyonear.crypto.InMemorySigner.account_id"]], "account_id (keyfile attribute)": [[3, "pyonear.crypto.KeyFile.account_id"]], "check_signature_values() (secp256k1signature method)": [[3, "pyonear.crypto.Secp256K1Signature.check_signature_values"]], "compute_vrf_with_proof() (inmemorysigner method)": [[3, "pyonear.crypto.InMemorySigner.compute_vrf_with_proof"]], "empty() (ed25519publickey static method)": [[3, "pyonear.crypto.ED25519PublicKey.empty"]], "empty() (ed25519signature static method)": [[3, "pyonear.crypto.ED25519Signature.empty"]], "empty() (secp256k1publickey static method)": [[3, "pyonear.crypto.Secp256K1PublicKey.empty"]], "empty() (secp256k1signature static method)": [[3, "pyonear.crypto.Secp256K1Signature.empty"]], "from_bytes() (ed25519publickey static method)": [[3, "pyonear.crypto.ED25519PublicKey.from_bytes"]], "from_bytes() (ed25519secretkey static method)": [[3, "pyonear.crypto.ED25519SecretKey.from_bytes"]], "from_bytes() (ed25519signature static method)": [[3, "pyonear.crypto.ED25519Signature.from_bytes"]], "from_bytes() (inmemorysigner static method)": [[3, "pyonear.crypto.InMemorySigner.from_bytes"]], "from_bytes() (keyfile static method)": [[3, "pyonear.crypto.KeyFile.from_bytes"]], "from_bytes() (secp256k1publickey static method)": [[3, "pyonear.crypto.Secp256K1PublicKey.from_bytes"]], "from_bytes() (secp256k1secretkey static method)": [[3, "pyonear.crypto.Secp256K1SecretKey.from_bytes"]], "from_bytes() (secp256k1signature static method)": [[3, "pyonear.crypto.Secp256K1Signature.from_bytes"]], "from_file() (inmemorysigner static method)": [[3, "pyonear.crypto.InMemorySigner.from_file"]], "from_file() (keyfile static method)": [[3, "pyonear.crypto.KeyFile.from_file"]], "from_json() (ed25519publickey static method)": [[3, "pyonear.crypto.ED25519PublicKey.from_json"]], "from_json() (ed25519secretkey static method)": [[3, "pyonear.crypto.ED25519SecretKey.from_json"]], "from_json() (ed25519signature static method)": [[3, "pyonear.crypto.ED25519Signature.from_json"]], "from_json() (inmemorysigner static method)": [[3, "pyonear.crypto.InMemorySigner.from_json"]], "from_json() (keyfile static method)": [[3, "pyonear.crypto.KeyFile.from_json"]], "from_json() (secp256k1publickey static method)": [[3, "pyonear.crypto.Secp256K1PublicKey.from_json"]], "from_json() (secp256k1secretkey static method)": [[3, "pyonear.crypto.Secp256K1SecretKey.from_json"]], "from_json() (secp256k1signature static method)": [[3, "pyonear.crypto.Secp256K1Signature.from_json"]], "from_random() (ed25519secretkey static method)": [[3, "pyonear.crypto.ED25519SecretKey.from_random"]], "from_random() (inmemorysigner static method)": [[3, "pyonear.crypto.InMemorySigner.from_random"]], "from_random() (secp256k1secretkey static method)": [[3, "pyonear.crypto.Secp256K1SecretKey.from_random"]], "from_secret_key() (inmemorysigner static method)": [[3, "pyonear.crypto.InMemorySigner.from_secret_key"]], "from_seed() (ed25519publickey static method)": [[3, "pyonear.crypto.ED25519PublicKey.from_seed"]], "from_seed() (ed25519secretkey static method)": [[3, "pyonear.crypto.ED25519SecretKey.from_seed"]], "from_seed() (inmemorysigner static method)": [[3, "pyonear.crypto.InMemorySigner.from_seed"]], "from_seed() (secp256k1secretkey static method)": [[3, "pyonear.crypto.Secp256K1SecretKey.from_seed"]], "from_str() (ed25519publickey static method)": [[3, "pyonear.crypto.ED25519PublicKey.from_str"]], "from_str() (ed25519secretkey static method)": [[3, "pyonear.crypto.ED25519SecretKey.from_str"]], "from_str() (ed25519signature static method)": [[3, "pyonear.crypto.ED25519Signature.from_str"]], "from_str() (secp256k1publickey static method)": [[3, "pyonear.crypto.Secp256K1PublicKey.from_str"]], "from_str() (secp256k1secretkey static method)": [[3, "pyonear.crypto.Secp256K1SecretKey.from_str"]], "from_str() (secp256k1signature static method)": [[3, "pyonear.crypto.Secp256K1Signature.from_str"]], "public_key (inmemorysigner attribute)": [[3, "pyonear.crypto.InMemorySigner.public_key"]], "public_key (keyfile attribute)": [[3, "pyonear.crypto.KeyFile.public_key"]], "public_key() (ed25519secretkey method)": [[3, "pyonear.crypto.ED25519SecretKey.public_key"]], "public_key() (emptysigner static method)": [[3, "pyonear.crypto.EmptySigner.public_key"]], "public_key() (secp256k1secretkey method)": [[3, "pyonear.crypto.Secp256K1SecretKey.public_key"]], "pyonear.crypto": [[3, "module-pyonear.crypto"]], "recover() (secp256k1signature method)": [[3, "pyonear.crypto.Secp256K1Signature.recover"]], "secret_key (inmemorysigner attribute)": [[3, "pyonear.crypto.InMemorySigner.secret_key"]], "secret_key (keyfile attribute)": [[3, "pyonear.crypto.KeyFile.secret_key"]], "sign() (ed25519secretkey method)": [[3, "pyonear.crypto.ED25519SecretKey.sign"]], "sign() (emptysigner static method)": [[3, "pyonear.crypto.EmptySigner.sign"]], "sign() (inmemorysigner method)": [[3, "pyonear.crypto.InMemorySigner.sign"]], "sign() (secp256k1secretkey method)": [[3, "pyonear.crypto.Secp256K1SecretKey.sign"]], "to_json() (ed25519publickey method)": [[3, "pyonear.crypto.ED25519PublicKey.to_json"]], "to_json() (ed25519secretkey method)": [[3, "pyonear.crypto.ED25519SecretKey.to_json"]], "to_json() (ed25519signature method)": [[3, "pyonear.crypto.ED25519Signature.to_json"]], "to_json() (inmemorysigner method)": [[3, "pyonear.crypto.InMemorySigner.to_json"]], "to_json() (keyfile method)": [[3, "pyonear.crypto.KeyFile.to_json"]], "to_json() (secp256k1publickey method)": [[3, "pyonear.crypto.Secp256K1PublicKey.to_json"]], "to_json() (secp256k1secretkey method)": [[3, "pyonear.crypto.Secp256K1SecretKey.to_json"]], "to_json() (secp256k1signature method)": [[3, "pyonear.crypto.Secp256K1Signature.to_json"]], "verify() (ed25519signature method)": [[3, "pyonear.crypto.ED25519Signature.verify"]], "verify() (emptysigner static method)": [[3, "pyonear.crypto.EmptySigner.verify"]], "verify() (inmemorysigner method)": [[3, "pyonear.crypto.InMemorySigner.verify"]], "verify() (secp256k1signature method)": [[3, "pyonear.crypto.Secp256K1Signature.verify"]], "write_to_file() (inmemorysigner method)": [[3, "pyonear.crypto.InMemorySigner.write_to_file"]], "write_to_file() (keyfile method)": [[3, "pyonear.crypto.KeyFile.write_to_file"]], "cryptohash (class in pyonear.crypto_hash)": [[4, "pyonear.crypto_hash.CryptoHash"]], "crypto_hash() (in module pyonear.crypto_hash)": [[4, "pyonear.crypto_hash.crypto_hash"]], "default() (cryptohash static method)": [[4, "pyonear.crypto_hash.CryptoHash.default"]], "from_bytes() (cryptohash static method)": [[4, "pyonear.crypto_hash.CryptoHash.from_bytes"]], "from_json() (cryptohash static method)": [[4, "pyonear.crypto_hash.CryptoHash.from_json"]], "from_str() (cryptohash static method)": [[4, "pyonear.crypto_hash.CryptoHash.from_str"]], "hash_bytes() (cryptohash static method)": [[4, "pyonear.crypto_hash.CryptoHash.hash_bytes"]], "pyonear.crypto_hash": [[4, "module-pyonear.crypto_hash"]], "to_json() (cryptohash method)": [[4, "pyonear.crypto_hash.CryptoHash.to_json"]], "zero() (cryptohash static method)": [[4, "pyonear.crypto_hash.CryptoHash.zero"]], "accesskeynotfound (class in pyonear.error.core)": [[5, "pyonear.error.core.AccessKeyNotFound"]], "accountalreadyexists (class in pyonear.error.core)": [[5, "pyonear.error.core.AccountAlreadyExists"]], "accountdoesnotexist (class in pyonear.error.core)": [[5, "pyonear.error.core.AccountDoesNotExist"]], "actionerror (class in pyonear.error.core)": [[5, "pyonear.error.core.ActionError"]], "actionsvalidationerrorfieldless (class in pyonear.error.core)": [[5, "pyonear.error.core.ActionsValidationErrorFieldless"]], "actornopermission (class in pyonear.error.core)": [[5, "pyonear.error.core.ActorNoPermission"]], "addkeyalreadyexists (class in pyonear.error.core)": [[5, "pyonear.error.core.AddKeyAlreadyExists"]], "addkeymethodnamelengthexceeded (class in pyonear.error.core)": [[5, "pyonear.error.core.AddKeyMethodNameLengthExceeded"]], "addkeymethodnamesnumberofbytesexceeded (class in pyonear.error.core)": [[5, "pyonear.error.core.AddKeyMethodNamesNumberOfBytesExceeded"]], "contractsizeexceeded (class in pyonear.error.core)": [[5, "pyonear.error.core.ContractSizeExceeded"]], "costoverflow (invalidtxerrorfieldless attribute)": [[5, "pyonear.error.core.InvalidTxErrorFieldless.CostOverflow"]], "createaccountnotallowed (class in pyonear.error.core)": [[5, "pyonear.error.core.CreateAccountNotAllowed"]], "createaccountonlybyregistrar (class in pyonear.error.core)": [[5, "pyonear.error.core.CreateAccountOnlyByRegistrar"]], "deleteaccountstaking (class in pyonear.error.core)": [[5, "pyonear.error.core.DeleteAccountStaking"]], "deleteaccountwithlargestate (class in pyonear.error.core)": [[5, "pyonear.error.core.DeleteAccountWithLargeState"]], "deleteactionmustbefinal (actionsvalidationerrorfieldless attribute)": [[5, "pyonear.error.core.ActionsValidationErrorFieldless.DeleteActionMustBeFinal"]], "deletekeydoesnotexist (class in pyonear.error.core)": [[5, "pyonear.error.core.DeleteKeyDoesNotExist"]], "depositwithfunctioncall (invalidaccesskeyerrorfieldless attribute)": [[5, "pyonear.error.core.InvalidAccessKeyErrorFieldless.DepositWithFunctionCall"]], "expired (invalidtxerrorfieldless attribute)": [[5, "pyonear.error.core.InvalidTxErrorFieldless.Expired"]], "functioncallargumentslengthexceeded (class in pyonear.error.core)": [[5, "pyonear.error.core.FunctionCallArgumentsLengthExceeded"]], "functioncallmethodnamelengthexceeded (class in pyonear.error.core)": [[5, "pyonear.error.core.FunctionCallMethodNameLengthExceeded"]], "functioncallzeroattachedgas (actionsvalidationerrorfieldless attribute)": [[5, "pyonear.error.core.ActionsValidationErrorFieldless.FunctionCallZeroAttachedGas"]], "insufficientstake (class in pyonear.error.core)": [[5, "pyonear.error.core.InsufficientStake"]], "integeroverflow (actionsvalidationerrorfieldless attribute)": [[5, "pyonear.error.core.ActionsValidationErrorFieldless.IntegerOverflow"]], "invalidaccesskeyerrorfieldless (class in pyonear.error.core)": [[5, "pyonear.error.core.InvalidAccessKeyErrorFieldless"]], "invalidaccountid (class in pyonear.error.core)": [[5, "pyonear.error.core.InvalidAccountId"]], "invalidchain (invalidtxerrorfieldless attribute)": [[5, "pyonear.error.core.InvalidTxErrorFieldless.InvalidChain"]], "invaliddatareceiverid (class in pyonear.error.core)": [[5, "pyonear.error.core.InvalidDataReceiverId"]], "invalidnonce (class in pyonear.error.core)": [[5, "pyonear.error.core.InvalidNonce"]], "invalidpredecessorid (class in pyonear.error.core)": [[5, "pyonear.error.core.InvalidPredecessorId"]], "invalidreceiverid (class in pyonear.error.core)": [[5, "pyonear.error.core.InvalidReceiverId"]], "invalidsignature (invalidtxerrorfieldless attribute)": [[5, "pyonear.error.core.InvalidTxErrorFieldless.InvalidSignature"]], "invalidsignerid (class in pyonear.error.core)": [[5, "pyonear.error.core.InvalidSignerId"]], "invalidtxerrorfieldless (class in pyonear.error.core)": [[5, "pyonear.error.core.InvalidTxErrorFieldless"]], "lackbalanceforstate (class in pyonear.error.core)": [[5, "pyonear.error.core.LackBalanceForState"]], "methodnamemismatch (class in pyonear.error.core)": [[5, "pyonear.error.core.MethodNameMismatch"]], "noncetoolarge (class in pyonear.error.core)": [[5, "pyonear.error.core.NonceTooLarge"]], "notenoughallowance (class in pyonear.error.core)": [[5, "pyonear.error.core.NotEnoughAllowance"]], "notenoughbalance (class in pyonear.error.core)": [[5, "pyonear.error.core.NotEnoughBalance"]], "numberinputdatadependenciesexceeded (class in pyonear.error.core)": [[5, "pyonear.error.core.NumberInputDataDependenciesExceeded"]], "onlyimplicitaccountcreationallowed (class in pyonear.error.core)": [[5, "pyonear.error.core.OnlyImplicitAccountCreationAllowed"]], "receiptinvalidreceiverid (class in pyonear.error.core)": [[5, "pyonear.error.core.ReceiptInvalidReceiverId"]], "receiptinvalidsignerid (class in pyonear.error.core)": [[5, "pyonear.error.core.ReceiptInvalidSignerId"]], "receivermismatch (class in pyonear.error.core)": [[5, "pyonear.error.core.ReceiverMismatch"]], "requiresfullaccess (invalidaccesskeyerrorfieldless attribute)": [[5, "pyonear.error.core.InvalidAccessKeyErrorFieldless.RequiresFullAccess"]], "returnedvaluelengthexceeded (class in pyonear.error.core)": [[5, "pyonear.error.core.ReturnedValueLengthExceeded"]], "signerdoesnotexist (class in pyonear.error.core)": [[5, "pyonear.error.core.SignerDoesNotExist"]], "totalnumberofactionsexceeded (class in pyonear.error.core)": [[5, "pyonear.error.core.TotalNumberOfActionsExceeded"]], "totalprepaidgasexceeded (class in pyonear.error.core)": [[5, "pyonear.error.core.TotalPrepaidGasExceeded"]], "transactionsizeexceeded (class in pyonear.error.core)": [[5, "pyonear.error.core.TransactionSizeExceeded"]], "triestostake (class in pyonear.error.core)": [[5, "pyonear.error.core.TriesToStake"]], "triestounstake (class in pyonear.error.core)": [[5, "pyonear.error.core.TriesToUnstake"]], "unsuitablestakingkey (class in pyonear.error.core)": [[5, "pyonear.error.core.UnsuitableStakingKey"]], "account_id (accesskeynotfound attribute)": [[5, "pyonear.error.core.AccessKeyNotFound.account_id"]], "account_id (accountalreadyexists attribute)": [[5, "pyonear.error.core.AccountAlreadyExists.account_id"]], "account_id (accountdoesnotexist attribute)": [[5, "pyonear.error.core.AccountDoesNotExist.account_id"]], "account_id (actornopermission attribute)": [[5, "pyonear.error.core.ActorNoPermission.account_id"]], "account_id (addkeyalreadyexists attribute)": [[5, "pyonear.error.core.AddKeyAlreadyExists.account_id"]], "account_id (createaccountnotallowed attribute)": [[5, "pyonear.error.core.CreateAccountNotAllowed.account_id"]], "account_id (createaccountonlybyregistrar attribute)": [[5, "pyonear.error.core.CreateAccountOnlyByRegistrar.account_id"]], "account_id (deleteaccountstaking attribute)": [[5, "pyonear.error.core.DeleteAccountStaking.account_id"]], "account_id (deleteaccountwithlargestate attribute)": [[5, "pyonear.error.core.DeleteAccountWithLargeState.account_id"]], "account_id (deletekeydoesnotexist attribute)": [[5, "pyonear.error.core.DeleteKeyDoesNotExist.account_id"]], "account_id (insufficientstake attribute)": [[5, "pyonear.error.core.InsufficientStake.account_id"]], "account_id (invalidaccountid attribute)": [[5, "pyonear.error.core.InvalidAccountId.account_id"]], "account_id (invaliddatareceiverid attribute)": [[5, "pyonear.error.core.InvalidDataReceiverId.account_id"]], "account_id (invalidpredecessorid attribute)": [[5, "pyonear.error.core.InvalidPredecessorId.account_id"]], "account_id (lackbalanceforstate attribute)": [[5, "pyonear.error.core.LackBalanceForState.account_id"]], "account_id (notenoughallowance attribute)": [[5, "pyonear.error.core.NotEnoughAllowance.account_id"]], "account_id (onlyimplicitaccountcreationallowed attribute)": [[5, "pyonear.error.core.OnlyImplicitAccountCreationAllowed.account_id"]], "account_id (receiptinvalidreceiverid attribute)": [[5, "pyonear.error.core.ReceiptInvalidReceiverId.account_id"]], "account_id (receiptinvalidsignerid attribute)": [[5, "pyonear.error.core.ReceiptInvalidSignerId.account_id"]], "account_id (triestostake attribute)": [[5, "pyonear.error.core.TriesToStake.account_id"]], "account_id (triestounstake attribute)": [[5, "pyonear.error.core.TriesToUnstake.account_id"]], "actor_id (actornopermission attribute)": [[5, "pyonear.error.core.ActorNoPermission.actor_id"]], "ak_nonce (invalidnonce attribute)": [[5, "pyonear.error.core.InvalidNonce.ak_nonce"]], "ak_receiver (receivermismatch attribute)": [[5, "pyonear.error.core.ReceiverMismatch.ak_receiver"]], "allowance (notenoughallowance attribute)": [[5, "pyonear.error.core.NotEnoughAllowance.allowance"]], "amount (lackbalanceforstate attribute)": [[5, "pyonear.error.core.LackBalanceForState.amount"]], "balance (notenoughbalance attribute)": [[5, "pyonear.error.core.NotEnoughBalance.balance"]], "balance (triestostake attribute)": [[5, "pyonear.error.core.TriesToStake.balance"]], "cost (notenoughallowance attribute)": [[5, "pyonear.error.core.NotEnoughAllowance.cost"]], "cost (notenoughbalance attribute)": [[5, "pyonear.error.core.NotEnoughBalance.cost"]], "from_bytes() (accesskeynotfound static method)": [[5, "pyonear.error.core.AccessKeyNotFound.from_bytes"]], "from_bytes() (accountalreadyexists static method)": [[5, "pyonear.error.core.AccountAlreadyExists.from_bytes"]], "from_bytes() (accountdoesnotexist static method)": [[5, "pyonear.error.core.AccountDoesNotExist.from_bytes"]], "from_bytes() (actionerror static method)": [[5, "pyonear.error.core.ActionError.from_bytes"]], "from_bytes() (actornopermission static method)": [[5, "pyonear.error.core.ActorNoPermission.from_bytes"]], "from_bytes() (addkeyalreadyexists static method)": [[5, "pyonear.error.core.AddKeyAlreadyExists.from_bytes"]], "from_bytes() (addkeymethodnamelengthexceeded static method)": [[5, "pyonear.error.core.AddKeyMethodNameLengthExceeded.from_bytes"]], "from_bytes() (addkeymethodnamesnumberofbytesexceeded static method)": [[5, "pyonear.error.core.AddKeyMethodNamesNumberOfBytesExceeded.from_bytes"]], "from_bytes() (contractsizeexceeded static method)": [[5, "pyonear.error.core.ContractSizeExceeded.from_bytes"], [8, "pyonear.error.vm.ContractSizeExceeded.from_bytes"]], "from_bytes() (createaccountnotallowed static method)": [[5, "pyonear.error.core.CreateAccountNotAllowed.from_bytes"]], "from_bytes() (createaccountonlybyregistrar static method)": [[5, "pyonear.error.core.CreateAccountOnlyByRegistrar.from_bytes"]], "from_bytes() (deleteaccountstaking static method)": [[5, "pyonear.error.core.DeleteAccountStaking.from_bytes"]], "from_bytes() (deleteaccountwithlargestate static method)": [[5, "pyonear.error.core.DeleteAccountWithLargeState.from_bytes"]], "from_bytes() (deletekeydoesnotexist static method)": [[5, "pyonear.error.core.DeleteKeyDoesNotExist.from_bytes"]], "from_bytes() (functioncallargumentslengthexceeded static method)": [[5, "pyonear.error.core.FunctionCallArgumentsLengthExceeded.from_bytes"]], "from_bytes() (functioncallmethodnamelengthexceeded static method)": [[5, "pyonear.error.core.FunctionCallMethodNameLengthExceeded.from_bytes"]], "from_bytes() (insufficientstake static method)": [[5, "pyonear.error.core.InsufficientStake.from_bytes"]], "from_bytes() (invalidaccountid static method)": [[5, "pyonear.error.core.InvalidAccountId.from_bytes"]], "from_bytes() (invaliddatareceiverid static method)": [[5, "pyonear.error.core.InvalidDataReceiverId.from_bytes"]], "from_bytes() (invalidnonce static method)": [[5, "pyonear.error.core.InvalidNonce.from_bytes"]], "from_bytes() (invalidpredecessorid static method)": [[5, "pyonear.error.core.InvalidPredecessorId.from_bytes"]], "from_bytes() (invalidreceiverid static method)": [[5, "pyonear.error.core.InvalidReceiverId.from_bytes"]], "from_bytes() (invalidsignerid static method)": [[5, "pyonear.error.core.InvalidSignerId.from_bytes"]], "from_bytes() (lackbalanceforstate static method)": [[5, "pyonear.error.core.LackBalanceForState.from_bytes"]], "from_bytes() (methodnamemismatch static method)": [[5, "pyonear.error.core.MethodNameMismatch.from_bytes"]], "from_bytes() (noncetoolarge static method)": [[5, "pyonear.error.core.NonceTooLarge.from_bytes"]], "from_bytes() (notenoughallowance static method)": [[5, "pyonear.error.core.NotEnoughAllowance.from_bytes"]], "from_bytes() (notenoughbalance static method)": [[5, "pyonear.error.core.NotEnoughBalance.from_bytes"]], "from_bytes() (numberinputdatadependenciesexceeded static method)": [[5, "pyonear.error.core.NumberInputDataDependenciesExceeded.from_bytes"], [8, "pyonear.error.vm.NumberInputDataDependenciesExceeded.from_bytes"]], "from_bytes() (onlyimplicitaccountcreationallowed static method)": [[5, "pyonear.error.core.OnlyImplicitAccountCreationAllowed.from_bytes"]], "from_bytes() (receiptinvalidreceiverid static method)": [[5, "pyonear.error.core.ReceiptInvalidReceiverId.from_bytes"]], "from_bytes() (receiptinvalidsignerid static method)": [[5, "pyonear.error.core.ReceiptInvalidSignerId.from_bytes"]], "from_bytes() (receivermismatch static method)": [[5, "pyonear.error.core.ReceiverMismatch.from_bytes"]], "from_bytes() (returnedvaluelengthexceeded static method)": [[5, "pyonear.error.core.ReturnedValueLengthExceeded.from_bytes"], [8, "pyonear.error.vm.ReturnedValueLengthExceeded.from_bytes"]], "from_bytes() (signerdoesnotexist static method)": [[5, "pyonear.error.core.SignerDoesNotExist.from_bytes"]], "from_bytes() (totalnumberofactionsexceeded static method)": [[5, "pyonear.error.core.TotalNumberOfActionsExceeded.from_bytes"]], "from_bytes() (totalprepaidgasexceeded static method)": [[5, "pyonear.error.core.TotalPrepaidGasExceeded.from_bytes"]], "from_bytes() (transactionsizeexceeded static method)": [[5, "pyonear.error.core.TransactionSizeExceeded.from_bytes"]], "from_bytes() (triestostake static method)": [[5, "pyonear.error.core.TriesToStake.from_bytes"]], "from_bytes() (triestounstake static method)": [[5, "pyonear.error.core.TriesToUnstake.from_bytes"]], "from_bytes() (unsuitablestakingkey static method)": [[5, "pyonear.error.core.UnsuitableStakingKey.from_bytes"]], "from_json() (accesskeynotfound static method)": [[5, "pyonear.error.core.AccessKeyNotFound.from_json"]], "from_json() (accountalreadyexists static method)": [[5, "pyonear.error.core.AccountAlreadyExists.from_json"]], "from_json() (accountdoesnotexist static method)": [[5, "pyonear.error.core.AccountDoesNotExist.from_json"]], "from_json() (actionerror static method)": [[5, "pyonear.error.core.ActionError.from_json"]], "from_json() (actornopermission static method)": [[5, "pyonear.error.core.ActorNoPermission.from_json"]], "from_json() (addkeyalreadyexists static method)": [[5, "pyonear.error.core.AddKeyAlreadyExists.from_json"]], "from_json() (addkeymethodnamelengthexceeded static method)": [[5, "pyonear.error.core.AddKeyMethodNameLengthExceeded.from_json"]], "from_json() (addkeymethodnamesnumberofbytesexceeded static method)": [[5, "pyonear.error.core.AddKeyMethodNamesNumberOfBytesExceeded.from_json"]], "from_json() (contractsizeexceeded static method)": [[5, "pyonear.error.core.ContractSizeExceeded.from_json"], [8, "pyonear.error.vm.ContractSizeExceeded.from_json"]], "from_json() (createaccountnotallowed static method)": [[5, "pyonear.error.core.CreateAccountNotAllowed.from_json"]], "from_json() (createaccountonlybyregistrar static method)": [[5, "pyonear.error.core.CreateAccountOnlyByRegistrar.from_json"]], "from_json() (deleteaccountstaking static method)": [[5, "pyonear.error.core.DeleteAccountStaking.from_json"]], "from_json() (deleteaccountwithlargestate static method)": [[5, "pyonear.error.core.DeleteAccountWithLargeState.from_json"]], "from_json() (deletekeydoesnotexist static method)": [[5, "pyonear.error.core.DeleteKeyDoesNotExist.from_json"]], "from_json() (functioncallargumentslengthexceeded static method)": [[5, "pyonear.error.core.FunctionCallArgumentsLengthExceeded.from_json"]], "from_json() (functioncallmethodnamelengthexceeded static method)": [[5, "pyonear.error.core.FunctionCallMethodNameLengthExceeded.from_json"]], "from_json() (insufficientstake static method)": [[5, "pyonear.error.core.InsufficientStake.from_json"]], "from_json() (invalidaccountid static method)": [[5, "pyonear.error.core.InvalidAccountId.from_json"]], "from_json() (invaliddatareceiverid static method)": [[5, "pyonear.error.core.InvalidDataReceiverId.from_json"]], "from_json() (invalidnonce static method)": [[5, "pyonear.error.core.InvalidNonce.from_json"]], "from_json() (invalidpredecessorid static method)": [[5, "pyonear.error.core.InvalidPredecessorId.from_json"]], "from_json() (invalidreceiverid static method)": [[5, "pyonear.error.core.InvalidReceiverId.from_json"]], "from_json() (invalidsignerid static method)": [[5, "pyonear.error.core.InvalidSignerId.from_json"]], "from_json() (lackbalanceforstate static method)": [[5, "pyonear.error.core.LackBalanceForState.from_json"]], "from_json() (methodnamemismatch static method)": [[5, "pyonear.error.core.MethodNameMismatch.from_json"]], "from_json() (noncetoolarge static method)": [[5, "pyonear.error.core.NonceTooLarge.from_json"]], "from_json() (notenoughallowance static method)": [[5, "pyonear.error.core.NotEnoughAllowance.from_json"]], "from_json() (notenoughbalance static method)": [[5, "pyonear.error.core.NotEnoughBalance.from_json"]], "from_json() (numberinputdatadependenciesexceeded static method)": [[5, "pyonear.error.core.NumberInputDataDependenciesExceeded.from_json"], [8, "pyonear.error.vm.NumberInputDataDependenciesExceeded.from_json"]], "from_json() (onlyimplicitaccountcreationallowed static method)": [[5, "pyonear.error.core.OnlyImplicitAccountCreationAllowed.from_json"]], "from_json() (receiptinvalidreceiverid static method)": [[5, "pyonear.error.core.ReceiptInvalidReceiverId.from_json"]], "from_json() (receiptinvalidsignerid static method)": [[5, "pyonear.error.core.ReceiptInvalidSignerId.from_json"]], "from_json() (receivermismatch static method)": [[5, "pyonear.error.core.ReceiverMismatch.from_json"]], "from_json() (returnedvaluelengthexceeded static method)": [[5, "pyonear.error.core.ReturnedValueLengthExceeded.from_json"], [8, "pyonear.error.vm.ReturnedValueLengthExceeded.from_json"]], "from_json() (signerdoesnotexist static method)": [[5, "pyonear.error.core.SignerDoesNotExist.from_json"]], "from_json() (totalnumberofactionsexceeded static method)": [[5, "pyonear.error.core.TotalNumberOfActionsExceeded.from_json"]], "from_json() (totalprepaidgasexceeded static method)": [[5, "pyonear.error.core.TotalPrepaidGasExceeded.from_json"]], "from_json() (transactionsizeexceeded static method)": [[5, "pyonear.error.core.TransactionSizeExceeded.from_json"]], "from_json() (triestostake static method)": [[5, "pyonear.error.core.TriesToStake.from_json"]], "from_json() (triestounstake static method)": [[5, "pyonear.error.core.TriesToUnstake.from_json"]], "from_json() (unsuitablestakingkey static method)": [[5, "pyonear.error.core.UnsuitableStakingKey.from_json"]], "index (actionerror attribute)": [[5, "pyonear.error.core.ActionError.index"]], "kind (actionerror attribute)": [[5, "pyonear.error.core.ActionError.kind"]], "length (addkeymethodnamelengthexceeded attribute)": [[5, "pyonear.error.core.AddKeyMethodNameLengthExceeded.length"]], "length (functioncallargumentslengthexceeded attribute)": [[5, "pyonear.error.core.FunctionCallArgumentsLengthExceeded.length"]], "length (functioncallmethodnamelengthexceeded attribute)": [[5, "pyonear.error.core.FunctionCallMethodNameLengthExceeded.length"]], "length (returnedvaluelengthexceeded attribute)": [[5, "pyonear.error.core.ReturnedValueLengthExceeded.length"], [8, "pyonear.error.vm.ReturnedValueLengthExceeded.length"]], "limit (addkeymethodnamelengthexceeded attribute)": [[5, "pyonear.error.core.AddKeyMethodNameLengthExceeded.limit"]], "limit (addkeymethodnamesnumberofbytesexceeded attribute)": [[5, "pyonear.error.core.AddKeyMethodNamesNumberOfBytesExceeded.limit"]], "limit (contractsizeexceeded attribute)": [[5, "pyonear.error.core.ContractSizeExceeded.limit"], [8, "pyonear.error.vm.ContractSizeExceeded.limit"]], "limit (functioncallargumentslengthexceeded attribute)": [[5, "pyonear.error.core.FunctionCallArgumentsLengthExceeded.limit"]], "limit (functioncallmethodnamelengthexceeded attribute)": [[5, "pyonear.error.core.FunctionCallMethodNameLengthExceeded.limit"]], "limit (numberinputdatadependenciesexceeded attribute)": [[5, "pyonear.error.core.NumberInputDataDependenciesExceeded.limit"], [8, "pyonear.error.vm.NumberInputDataDependenciesExceeded.limit"]], "limit (returnedvaluelengthexceeded attribute)": [[5, "pyonear.error.core.ReturnedValueLengthExceeded.limit"], [8, "pyonear.error.vm.ReturnedValueLengthExceeded.limit"]], "limit (totalnumberofactionsexceeded attribute)": [[5, "pyonear.error.core.TotalNumberOfActionsExceeded.limit"]], "limit (totalprepaidgasexceeded attribute)": [[5, "pyonear.error.core.TotalPrepaidGasExceeded.limit"]], "limit (transactionsizeexceeded attribute)": [[5, "pyonear.error.core.TransactionSizeExceeded.limit"]], "locked (triestostake attribute)": [[5, "pyonear.error.core.TriesToStake.locked"]], "method_name (methodnamemismatch attribute)": [[5, "pyonear.error.core.MethodNameMismatch.method_name"]], "minimum_stake (insufficientstake attribute)": [[5, "pyonear.error.core.InsufficientStake.minimum_stake"]], "number_of_input_data_dependencies (numberinputdatadependenciesexceeded attribute)": [[5, "pyonear.error.core.NumberInputDataDependenciesExceeded.number_of_input_data_dependencies"], [8, "pyonear.error.vm.NumberInputDataDependenciesExceeded.number_of_input_data_dependencies"]], "predecessor_id (createaccountnotallowed attribute)": [[5, "pyonear.error.core.CreateAccountNotAllowed.predecessor_id"]], "predecessor_id (createaccountonlybyregistrar attribute)": [[5, "pyonear.error.core.CreateAccountOnlyByRegistrar.predecessor_id"]], "public_key (accesskeynotfound attribute)": [[5, "pyonear.error.core.AccessKeyNotFound.public_key"]], "public_key (addkeyalreadyexists attribute)": [[5, "pyonear.error.core.AddKeyAlreadyExists.public_key"]], "public_key (deletekeydoesnotexist attribute)": [[5, "pyonear.error.core.DeleteKeyDoesNotExist.public_key"]], "public_key (notenoughallowance attribute)": [[5, "pyonear.error.core.NotEnoughAllowance.public_key"]], "public_key (unsuitablestakingkey attribute)": [[5, "pyonear.error.core.UnsuitableStakingKey.public_key"]], "pyonear.error.core": [[5, "module-pyonear.error.core"]], "receiver_id (invalidreceiverid attribute)": [[5, "pyonear.error.core.InvalidReceiverId.receiver_id"]], "registrar_account_id (createaccountonlybyregistrar attribute)": [[5, "pyonear.error.core.CreateAccountOnlyByRegistrar.registrar_account_id"]], "signer_id (invalidsignerid attribute)": [[5, "pyonear.error.core.InvalidSignerId.signer_id"]], "signer_id (notenoughbalance attribute)": [[5, "pyonear.error.core.NotEnoughBalance.signer_id"]], "signer_id (signerdoesnotexist attribute)": [[5, "pyonear.error.core.SignerDoesNotExist.signer_id"]], "size (contractsizeexceeded attribute)": [[5, "pyonear.error.core.ContractSizeExceeded.size"], [8, "pyonear.error.vm.ContractSizeExceeded.size"]], "size (transactionsizeexceeded attribute)": [[5, "pyonear.error.core.TransactionSizeExceeded.size"]], "stake (insufficientstake attribute)": [[5, "pyonear.error.core.InsufficientStake.stake"]], "stake (triestostake attribute)": [[5, "pyonear.error.core.TriesToStake.stake"]], "to_json() (accesskeynotfound method)": [[5, "pyonear.error.core.AccessKeyNotFound.to_json"]], "to_json() (accountalreadyexists method)": [[5, "pyonear.error.core.AccountAlreadyExists.to_json"]], "to_json() (accountdoesnotexist method)": [[5, "pyonear.error.core.AccountDoesNotExist.to_json"]], "to_json() (actionerror method)": [[5, "pyonear.error.core.ActionError.to_json"]], "to_json() (actornopermission method)": [[5, "pyonear.error.core.ActorNoPermission.to_json"]], "to_json() (addkeyalreadyexists method)": [[5, "pyonear.error.core.AddKeyAlreadyExists.to_json"]], "to_json() (addkeymethodnamelengthexceeded method)": [[5, "pyonear.error.core.AddKeyMethodNameLengthExceeded.to_json"]], "to_json() (addkeymethodnamesnumberofbytesexceeded method)": [[5, "pyonear.error.core.AddKeyMethodNamesNumberOfBytesExceeded.to_json"]], "to_json() (contractsizeexceeded method)": [[5, "pyonear.error.core.ContractSizeExceeded.to_json"], [8, "pyonear.error.vm.ContractSizeExceeded.to_json"]], "to_json() (createaccountnotallowed method)": [[5, "pyonear.error.core.CreateAccountNotAllowed.to_json"]], "to_json() (createaccountonlybyregistrar method)": [[5, "pyonear.error.core.CreateAccountOnlyByRegistrar.to_json"]], "to_json() (deleteaccountstaking method)": [[5, "pyonear.error.core.DeleteAccountStaking.to_json"]], "to_json() (deleteaccountwithlargestate method)": [[5, "pyonear.error.core.DeleteAccountWithLargeState.to_json"]], "to_json() (deletekeydoesnotexist method)": [[5, "pyonear.error.core.DeleteKeyDoesNotExist.to_json"]], "to_json() (functioncallargumentslengthexceeded method)": [[5, "pyonear.error.core.FunctionCallArgumentsLengthExceeded.to_json"]], "to_json() (functioncallmethodnamelengthexceeded method)": [[5, "pyonear.error.core.FunctionCallMethodNameLengthExceeded.to_json"]], "to_json() (insufficientstake method)": [[5, "pyonear.error.core.InsufficientStake.to_json"]], "to_json() (invalidaccountid method)": [[5, "pyonear.error.core.InvalidAccountId.to_json"]], "to_json() (invaliddatareceiverid method)": [[5, "pyonear.error.core.InvalidDataReceiverId.to_json"]], "to_json() (invalidnonce method)": [[5, "pyonear.error.core.InvalidNonce.to_json"]], "to_json() (invalidpredecessorid method)": [[5, "pyonear.error.core.InvalidPredecessorId.to_json"]], "to_json() (invalidreceiverid method)": [[5, "pyonear.error.core.InvalidReceiverId.to_json"]], "to_json() (invalidsignerid method)": [[5, "pyonear.error.core.InvalidSignerId.to_json"]], "to_json() (lackbalanceforstate method)": [[5, "pyonear.error.core.LackBalanceForState.to_json"]], "to_json() (methodnamemismatch method)": [[5, "pyonear.error.core.MethodNameMismatch.to_json"]], "to_json() (noncetoolarge method)": [[5, "pyonear.error.core.NonceTooLarge.to_json"]], "to_json() (notenoughallowance method)": [[5, "pyonear.error.core.NotEnoughAllowance.to_json"]], "to_json() (notenoughbalance method)": [[5, "pyonear.error.core.NotEnoughBalance.to_json"]], "to_json() (numberinputdatadependenciesexceeded method)": [[5, "pyonear.error.core.NumberInputDataDependenciesExceeded.to_json"], [8, "pyonear.error.vm.NumberInputDataDependenciesExceeded.to_json"]], "to_json() (onlyimplicitaccountcreationallowed method)": [[5, "pyonear.error.core.OnlyImplicitAccountCreationAllowed.to_json"]], "to_json() (receiptinvalidreceiverid method)": [[5, "pyonear.error.core.ReceiptInvalidReceiverId.to_json"]], "to_json() (receiptinvalidsignerid method)": [[5, "pyonear.error.core.ReceiptInvalidSignerId.to_json"]], "to_json() (receivermismatch method)": [[5, "pyonear.error.core.ReceiverMismatch.to_json"]], "to_json() (returnedvaluelengthexceeded method)": [[5, "pyonear.error.core.ReturnedValueLengthExceeded.to_json"], [8, "pyonear.error.vm.ReturnedValueLengthExceeded.to_json"]], "to_json() (signerdoesnotexist method)": [[5, "pyonear.error.core.SignerDoesNotExist.to_json"]], "to_json() (totalnumberofactionsexceeded method)": [[5, "pyonear.error.core.TotalNumberOfActionsExceeded.to_json"]], "to_json() (totalprepaidgasexceeded method)": [[5, "pyonear.error.core.TotalPrepaidGasExceeded.to_json"]], "to_json() (transactionsizeexceeded method)": [[5, "pyonear.error.core.TransactionSizeExceeded.to_json"]], "to_json() (triestostake method)": [[5, "pyonear.error.core.TriesToStake.to_json"]], "to_json() (triestounstake method)": [[5, "pyonear.error.core.TriesToUnstake.to_json"]], "to_json() (unsuitablestakingkey method)": [[5, "pyonear.error.core.UnsuitableStakingKey.to_json"]], "total_number_of_actions (totalnumberofactionsexceeded attribute)": [[5, "pyonear.error.core.TotalNumberOfActionsExceeded.total_number_of_actions"]], "total_number_of_bytes (addkeymethodnamesnumberofbytesexceeded attribute)": [[5, "pyonear.error.core.AddKeyMethodNamesNumberOfBytesExceeded.total_number_of_bytes"]], "total_prepaid_gas (totalprepaidgasexceeded attribute)": [[5, "pyonear.error.core.TotalPrepaidGasExceeded.total_prepaid_gas"]], "tx_nonce (invalidnonce attribute)": [[5, "pyonear.error.core.InvalidNonce.tx_nonce"]], "tx_nonce (noncetoolarge attribute)": [[5, "pyonear.error.core.NonceTooLarge.tx_nonce"]], "tx_receiver (receivermismatch attribute)": [[5, "pyonear.error.core.ReceiverMismatch.tx_receiver"]], "upper_bound (noncetoolarge attribute)": [[5, "pyonear.error.core.NonceTooLarge.upper_bound"]], "parsekeyerror": [[6, "pyonear.error.exception.ParseKeyError"]], "parsesignatureerror": [[6, "pyonear.error.exception.ParseSignatureError"]], "secp256k1error": [[6, "pyonear.error.exception.Secp256K1Error"]], "tryfromsliceerror": [[6, "pyonear.error.exception.TryFromSliceError"]], "pyonear.error.exception": [[6, "module-pyonear.error.exception"]], "altbn128invalidinput (class in pyonear.error.vm)": [[8, "pyonear.error.vm.AltBn128InvalidInput"]], "badutf16 (hosterrorfieldless attribute)": [[8, "pyonear.error.vm.HostErrorFieldless.BadUTF16"]], "badutf8 (hosterrorfieldless attribute)": [[8, "pyonear.error.vm.HostErrorFieldless.BadUTF8"]], "balanceexceeded (hosterrorfieldless attribute)": [[8, "pyonear.error.vm.HostErrorFieldless.BalanceExceeded"]], "cacheerrorfieldless (class in pyonear.error.vm)": [[8, "pyonear.error.vm.CacheErrorFieldless"]], "callindirectoob (wasmtrap attribute)": [[8, "pyonear.error.vm.WasmTrap.CallIndirectOOB"]], "cannotappendactiontojointpromise (hosterrorfieldless attribute)": [[8, "pyonear.error.vm.HostErrorFieldless.CannotAppendActionToJointPromise"]], "cannotreturnjointpromise (hosterrorfieldless attribute)": [[8, "pyonear.error.vm.HostErrorFieldless.CannotReturnJointPromise"]], "codedoesnotexist (class in pyonear.error.vm)": [[8, "pyonear.error.vm.CodeDoesNotExist"]], "contractsizeexceeded (class in pyonear.error.vm)": [[8, "pyonear.error.vm.ContractSizeExceeded"]], "deprecated (class in pyonear.error.vm)": [[8, "pyonear.error.vm.Deprecated"]], "deserialization (prepareerror attribute)": [[8, "pyonear.error.vm.PrepareError.Deserialization"]], "deserializationerror (cacheerrorfieldless attribute)": [[8, "pyonear.error.vm.CacheErrorFieldless.DeserializationError"]], "ecrecovererror (class in pyonear.error.vm)": [[8, "pyonear.error.vm.ECRecoverError"]], "ed25519verifyinvalidinput (class in pyonear.error.vm)": [[8, "pyonear.error.vm.Ed25519VerifyInvalidInput"]], "emptymethodname (hosterrorfieldless attribute)": [[8, "pyonear.error.vm.HostErrorFieldless.EmptyMethodName"]], "functioncallerrorserfieldless (class in pyonear.error.vm)": [[8, "pyonear.error.vm.FunctionCallErrorSerFieldless"]], "gasexceeded (hosterrorfieldless attribute)": [[8, "pyonear.error.vm.HostErrorFieldless.GasExceeded"]], "gasinstrumentation (prepareerror attribute)": [[8, "pyonear.error.vm.PrepareError.GasInstrumentation"]], "gaslimitexceeded (hosterrorfieldless attribute)": [[8, "pyonear.error.vm.HostErrorFieldless.GasLimitExceeded"]], "generictrap (wasmtrap attribute)": [[8, "pyonear.error.vm.WasmTrap.GenericTrap"]], "guestpanic (class in pyonear.error.vm)": [[8, "pyonear.error.vm.GuestPanic"]], "hosterrorfieldless (class in pyonear.error.vm)": [[8, "pyonear.error.vm.HostErrorFieldless"]], "illegalarithmetic (wasmtrap attribute)": [[8, "pyonear.error.vm.WasmTrap.IllegalArithmetic"]], "incorrectcallindirectsignature (wasmtrap attribute)": [[8, "pyonear.error.vm.WasmTrap.IncorrectCallIndirectSignature"]], "indirectcalltonull (wasmtrap attribute)": [[8, "pyonear.error.vm.WasmTrap.IndirectCallToNull"]], "instantiate (prepareerror attribute)": [[8, "pyonear.error.vm.PrepareError.Instantiate"]], "integeroverflow (hosterrorfieldless attribute)": [[8, "pyonear.error.vm.HostErrorFieldless.IntegerOverflow"]], "internalmemorydeclared (prepareerror attribute)": [[8, "pyonear.error.vm.PrepareError.InternalMemoryDeclared"]], "invalidaccountid (hosterrorfieldless attribute)": [[8, "pyonear.error.vm.HostErrorFieldless.InvalidAccountId"]], "invaliditeratorindex (class in pyonear.error.vm)": [[8, "pyonear.error.vm.InvalidIteratorIndex"]], "invalidmethodname (hosterrorfieldless attribute)": [[8, "pyonear.error.vm.HostErrorFieldless.InvalidMethodName"]], "invalidpromiseindex (class in pyonear.error.vm)": [[8, "pyonear.error.vm.InvalidPromiseIndex"]], "invalidpromiseresultindex (class in pyonear.error.vm)": [[8, "pyonear.error.vm.InvalidPromiseResultIndex"]], "invalidpublickey (hosterrorfieldless attribute)": [[8, "pyonear.error.vm.HostErrorFieldless.InvalidPublicKey"]], "invalidreceiptindex (class in pyonear.error.vm)": [[8, "pyonear.error.vm.InvalidReceiptIndex"]], "invalidregisterid (class in pyonear.error.vm)": [[8, "pyonear.error.vm.InvalidRegisterId"]], "iteratorwasinvalidated (class in pyonear.error.vm)": [[8, "pyonear.error.vm.IteratorWasInvalidated"]], "keylengthexceeded (class in pyonear.error.vm)": [[8, "pyonear.error.vm.KeyLengthExceeded"]], "linkerror (class in pyonear.error.vm)": [[8, "pyonear.error.vm.LinkError"]], "memory (prepareerror attribute)": [[8, "pyonear.error.vm.PrepareError.Memory"]], "memoryaccessviolation (hosterrorfieldless attribute)": [[8, "pyonear.error.vm.HostErrorFieldless.MemoryAccessViolation"]], "memoryoutofbounds (wasmtrap attribute)": [[8, "pyonear.error.vm.WasmTrap.MemoryOutOfBounds"]], "methodemptyname (methodresolveerror attribute)": [[8, "pyonear.error.vm.MethodResolveError.MethodEmptyName"]], "methodinvalidsignature (methodresolveerror attribute)": [[8, "pyonear.error.vm.MethodResolveError.MethodInvalidSignature"]], "methodnotfound (methodresolveerror attribute)": [[8, "pyonear.error.vm.MethodResolveError.MethodNotFound"]], "methodresolveerror (class in pyonear.error.vm)": [[8, "pyonear.error.vm.MethodResolveError"]], "misalignedatomicaccess (wasmtrap attribute)": [[8, "pyonear.error.vm.WasmTrap.MisalignedAtomicAccess"]], "numberinputdatadependenciesexceeded (class in pyonear.error.vm)": [[8, "pyonear.error.vm.NumberInputDataDependenciesExceeded"]], "numberoflogsexceeded (class in pyonear.error.vm)": [[8, "pyonear.error.vm.NumberOfLogsExceeded"]], "numberpromisesexceeded (class in pyonear.error.vm)": [[8, "pyonear.error.vm.NumberPromisesExceeded"]], "prepareerror (class in pyonear.error.vm)": [[8, "pyonear.error.vm.PrepareError"]], "prohibitedinview (class in pyonear.error.vm)": [[8, "pyonear.error.vm.ProhibitedInView"]], "readerror (cacheerrorfieldless attribute)": [[8, "pyonear.error.vm.CacheErrorFieldless.ReadError"]], "returnedvaluelengthexceeded (class in pyonear.error.vm)": [[8, "pyonear.error.vm.ReturnedValueLengthExceeded"]], "serialization (prepareerror attribute)": [[8, "pyonear.error.vm.PrepareError.Serialization"]], "serializationerror (class in pyonear.error.vm)": [[8, "pyonear.error.vm.SerializationError"]], "stackheightinstrumentation (prepareerror attribute)": [[8, "pyonear.error.vm.PrepareError.StackHeightInstrumentation"]], "stackoverflow (wasmtrap attribute)": [[8, "pyonear.error.vm.WasmTrap.StackOverflow"]], "totalloglengthexceeded (class in pyonear.error.vm)": [[8, "pyonear.error.vm.TotalLogLengthExceeded"]], "unreachable (wasmtrap attribute)": [[8, "pyonear.error.vm.WasmTrap.Unreachable"]], "unsupportedcompiler (class in pyonear.error.vm)": [[8, "pyonear.error.vm.UnsupportedCompiler"]], "valuelengthexceeded (class in pyonear.error.vm)": [[8, "pyonear.error.vm.ValueLengthExceeded"]], "wasmtrap (class in pyonear.error.vm)": [[8, "pyonear.error.vm.WasmTrap"]], "wasmunknownerror (functioncallerrorserfieldless attribute)": [[8, "pyonear.error.vm.FunctionCallErrorSerFieldless.WasmUnknownError"]], "wasmercompileerror (class in pyonear.error.vm)": [[8, "pyonear.error.vm.WasmerCompileError"]], "writeerror (cacheerrorfieldless attribute)": [[8, "pyonear.error.vm.CacheErrorFieldless.WriteError"]], "account_id (codedoesnotexist attribute)": [[8, "pyonear.error.vm.CodeDoesNotExist.account_id"]], "from_bytes() (altbn128invalidinput static method)": [[8, "pyonear.error.vm.AltBn128InvalidInput.from_bytes"]], "from_bytes() (codedoesnotexist static method)": [[8, "pyonear.error.vm.CodeDoesNotExist.from_bytes"]], "from_bytes() (deprecated static method)": [[8, "pyonear.error.vm.Deprecated.from_bytes"]], "from_bytes() (ecrecovererror static method)": [[8, "pyonear.error.vm.ECRecoverError.from_bytes"]], "from_bytes() (ed25519verifyinvalidinput static method)": [[8, "pyonear.error.vm.Ed25519VerifyInvalidInput.from_bytes"]], "from_bytes() (guestpanic static method)": [[8, "pyonear.error.vm.GuestPanic.from_bytes"]], "from_bytes() (invaliditeratorindex static method)": [[8, "pyonear.error.vm.InvalidIteratorIndex.from_bytes"]], "from_bytes() (invalidpromiseindex static method)": [[8, "pyonear.error.vm.InvalidPromiseIndex.from_bytes"]], "from_bytes() (invalidpromiseresultindex static method)": [[8, "pyonear.error.vm.InvalidPromiseResultIndex.from_bytes"]], "from_bytes() (invalidreceiptindex static method)": [[8, "pyonear.error.vm.InvalidReceiptIndex.from_bytes"]], "from_bytes() (invalidregisterid static method)": [[8, "pyonear.error.vm.InvalidRegisterId.from_bytes"]], "from_bytes() (iteratorwasinvalidated static method)": [[8, "pyonear.error.vm.IteratorWasInvalidated.from_bytes"]], "from_bytes() (keylengthexceeded static method)": [[8, "pyonear.error.vm.KeyLengthExceeded.from_bytes"]], "from_bytes() (linkerror static method)": [[8, "pyonear.error.vm.LinkError.from_bytes"]], "from_bytes() (numberoflogsexceeded static method)": [[8, "pyonear.error.vm.NumberOfLogsExceeded.from_bytes"]], "from_bytes() (numberpromisesexceeded static method)": [[8, "pyonear.error.vm.NumberPromisesExceeded.from_bytes"]], "from_bytes() (prohibitedinview static method)": [[8, "pyonear.error.vm.ProhibitedInView.from_bytes"]], "from_bytes() (serializationerror static method)": [[8, "pyonear.error.vm.SerializationError.from_bytes"]], "from_bytes() (totalloglengthexceeded static method)": [[8, "pyonear.error.vm.TotalLogLengthExceeded.from_bytes"]], "from_bytes() (unsupportedcompiler static method)": [[8, "pyonear.error.vm.UnsupportedCompiler.from_bytes"]], "from_bytes() (valuelengthexceeded static method)": [[8, "pyonear.error.vm.ValueLengthExceeded.from_bytes"]], "from_bytes() (wasmercompileerror static method)": [[8, "pyonear.error.vm.WasmerCompileError.from_bytes"]], "from_json() (altbn128invalidinput static method)": [[8, "pyonear.error.vm.AltBn128InvalidInput.from_json"]], "from_json() (codedoesnotexist static method)": [[8, "pyonear.error.vm.CodeDoesNotExist.from_json"]], "from_json() (deprecated static method)": [[8, "pyonear.error.vm.Deprecated.from_json"]], "from_json() (ecrecovererror static method)": [[8, "pyonear.error.vm.ECRecoverError.from_json"]], "from_json() (ed25519verifyinvalidinput static method)": [[8, "pyonear.error.vm.Ed25519VerifyInvalidInput.from_json"]], "from_json() (guestpanic static method)": [[8, "pyonear.error.vm.GuestPanic.from_json"]], "from_json() (invaliditeratorindex static method)": [[8, "pyonear.error.vm.InvalidIteratorIndex.from_json"]], "from_json() (invalidpromiseindex static method)": [[8, "pyonear.error.vm.InvalidPromiseIndex.from_json"]], "from_json() (invalidpromiseresultindex static method)": [[8, "pyonear.error.vm.InvalidPromiseResultIndex.from_json"]], "from_json() (invalidreceiptindex static method)": [[8, "pyonear.error.vm.InvalidReceiptIndex.from_json"]], "from_json() (invalidregisterid static method)": [[8, "pyonear.error.vm.InvalidRegisterId.from_json"]], "from_json() (iteratorwasinvalidated static method)": [[8, "pyonear.error.vm.IteratorWasInvalidated.from_json"]], "from_json() (keylengthexceeded static method)": [[8, "pyonear.error.vm.KeyLengthExceeded.from_json"]], "from_json() (linkerror static method)": [[8, "pyonear.error.vm.LinkError.from_json"]], "from_json() (numberoflogsexceeded static method)": [[8, "pyonear.error.vm.NumberOfLogsExceeded.from_json"]], "from_json() (numberpromisesexceeded static method)": [[8, "pyonear.error.vm.NumberPromisesExceeded.from_json"]], "from_json() (prohibitedinview static method)": [[8, "pyonear.error.vm.ProhibitedInView.from_json"]], "from_json() (serializationerror static method)": [[8, "pyonear.error.vm.SerializationError.from_json"]], "from_json() (totalloglengthexceeded static method)": [[8, "pyonear.error.vm.TotalLogLengthExceeded.from_json"]], "from_json() (unsupportedcompiler static method)": [[8, "pyonear.error.vm.UnsupportedCompiler.from_json"]], "from_json() (valuelengthexceeded static method)": [[8, "pyonear.error.vm.ValueLengthExceeded.from_json"]], "from_json() (wasmercompileerror static method)": [[8, "pyonear.error.vm.WasmerCompileError.from_json"]], "hash (serializationerror attribute)": [[8, "pyonear.error.vm.SerializationError.hash"]], "iterator_index (invaliditeratorindex attribute)": [[8, "pyonear.error.vm.InvalidIteratorIndex.iterator_index"]], "iterator_index (iteratorwasinvalidated attribute)": [[8, "pyonear.error.vm.IteratorWasInvalidated.iterator_index"]], "length (keylengthexceeded attribute)": [[8, "pyonear.error.vm.KeyLengthExceeded.length"]], "length (totalloglengthexceeded attribute)": [[8, "pyonear.error.vm.TotalLogLengthExceeded.length"]], "length (valuelengthexceeded attribute)": [[8, "pyonear.error.vm.ValueLengthExceeded.length"]], "limit (keylengthexceeded attribute)": [[8, "pyonear.error.vm.KeyLengthExceeded.limit"]], "limit (numberoflogsexceeded attribute)": [[8, "pyonear.error.vm.NumberOfLogsExceeded.limit"]], "limit (numberpromisesexceeded attribute)": [[8, "pyonear.error.vm.NumberPromisesExceeded.limit"]], "limit (totalloglengthexceeded attribute)": [[8, "pyonear.error.vm.TotalLogLengthExceeded.limit"]], "limit (valuelengthexceeded attribute)": [[8, "pyonear.error.vm.ValueLengthExceeded.limit"]], "method_name (deprecated attribute)": [[8, "pyonear.error.vm.Deprecated.method_name"]], "method_name (prohibitedinview attribute)": [[8, "pyonear.error.vm.ProhibitedInView.method_name"]], "msg (altbn128invalidinput attribute)": [[8, "pyonear.error.vm.AltBn128InvalidInput.msg"]], "msg (ecrecovererror attribute)": [[8, "pyonear.error.vm.ECRecoverError.msg"]], "msg (ed25519verifyinvalidinput attribute)": [[8, "pyonear.error.vm.Ed25519VerifyInvalidInput.msg"]], "msg (linkerror attribute)": [[8, "pyonear.error.vm.LinkError.msg"]], "msg (unsupportedcompiler attribute)": [[8, "pyonear.error.vm.UnsupportedCompiler.msg"]], "msg (wasmercompileerror attribute)": [[8, "pyonear.error.vm.WasmerCompileError.msg"]], "number_of_promises (numberpromisesexceeded attribute)": [[8, "pyonear.error.vm.NumberPromisesExceeded.number_of_promises"]], "panic_msg (guestpanic attribute)": [[8, "pyonear.error.vm.GuestPanic.panic_msg"]], "promise_idx (invalidpromiseindex attribute)": [[8, "pyonear.error.vm.InvalidPromiseIndex.promise_idx"]], "pyonear.error.vm": [[8, "module-pyonear.error.vm"]], "receipt_index (invalidreceiptindex attribute)": [[8, "pyonear.error.vm.InvalidReceiptIndex.receipt_index"]], "register_id (invalidregisterid attribute)": [[8, "pyonear.error.vm.InvalidRegisterId.register_id"]], "result_idx (invalidpromiseresultindex attribute)": [[8, "pyonear.error.vm.InvalidPromiseResultIndex.result_idx"]], "to_json() (altbn128invalidinput method)": [[8, "pyonear.error.vm.AltBn128InvalidInput.to_json"]], "to_json() (codedoesnotexist method)": [[8, "pyonear.error.vm.CodeDoesNotExist.to_json"]], "to_json() (deprecated method)": [[8, "pyonear.error.vm.Deprecated.to_json"]], "to_json() (ecrecovererror method)": [[8, "pyonear.error.vm.ECRecoverError.to_json"]], "to_json() (ed25519verifyinvalidinput method)": [[8, "pyonear.error.vm.Ed25519VerifyInvalidInput.to_json"]], "to_json() (guestpanic method)": [[8, "pyonear.error.vm.GuestPanic.to_json"]], "to_json() (invaliditeratorindex method)": [[8, "pyonear.error.vm.InvalidIteratorIndex.to_json"]], "to_json() (invalidpromiseindex method)": [[8, "pyonear.error.vm.InvalidPromiseIndex.to_json"]], "to_json() (invalidpromiseresultindex method)": [[8, "pyonear.error.vm.InvalidPromiseResultIndex.to_json"]], "to_json() (invalidreceiptindex method)": [[8, "pyonear.error.vm.InvalidReceiptIndex.to_json"]], "to_json() (invalidregisterid method)": [[8, "pyonear.error.vm.InvalidRegisterId.to_json"]], "to_json() (iteratorwasinvalidated method)": [[8, "pyonear.error.vm.IteratorWasInvalidated.to_json"]], "to_json() (keylengthexceeded method)": [[8, "pyonear.error.vm.KeyLengthExceeded.to_json"]], "to_json() (linkerror method)": [[8, "pyonear.error.vm.LinkError.to_json"]], "to_json() (numberoflogsexceeded method)": [[8, "pyonear.error.vm.NumberOfLogsExceeded.to_json"]], "to_json() (numberpromisesexceeded method)": [[8, "pyonear.error.vm.NumberPromisesExceeded.to_json"]], "to_json() (prohibitedinview method)": [[8, "pyonear.error.vm.ProhibitedInView.to_json"]], "to_json() (serializationerror method)": [[8, "pyonear.error.vm.SerializationError.to_json"]], "to_json() (totalloglengthexceeded method)": [[8, "pyonear.error.vm.TotalLogLengthExceeded.to_json"]], "to_json() (unsupportedcompiler method)": [[8, "pyonear.error.vm.UnsupportedCompiler.to_json"]], "to_json() (valuelengthexceeded method)": [[8, "pyonear.error.vm.ValueLengthExceeded.to_json"]], "to_json() (wasmercompileerror method)": [[8, "pyonear.error.vm.WasmerCompileError.to_json"]], "direction (class in pyonear.merkle)": [[10, "pyonear.merkle.Direction"]], "left (direction attribute)": [[10, "pyonear.merkle.Direction.Left"]], "merklepathitem (class in pyonear.merkle)": [[10, "pyonear.merkle.MerklePathItem"]], "right (direction attribute)": [[10, "pyonear.merkle.Direction.Right"]], "direction (merklepathitem attribute)": [[10, "pyonear.merkle.MerklePathItem.direction"]], "from_bytes() (merklepathitem static method)": [[10, "pyonear.merkle.MerklePathItem.from_bytes"]], "from_json() (merklepathitem static method)": [[10, "pyonear.merkle.MerklePathItem.from_json"]], "hash (merklepathitem attribute)": [[10, "pyonear.merkle.MerklePathItem.hash"]], "pyonear.merkle": [[10, "module-pyonear.merkle"]], "to_json() (merklepathitem method)": [[10, "pyonear.merkle.MerklePathItem.to_json"]], "addkeyaction (class in pyonear.transaction)": [[11, "pyonear.transaction.AddKeyAction"]], "createaccountaction (class in pyonear.transaction)": [[11, "pyonear.transaction.CreateAccountAction"]], "deleteaccountaction (class in pyonear.transaction)": [[11, "pyonear.transaction.DeleteAccountAction"]], "deletekeyaction (class in pyonear.transaction)": [[11, "pyonear.transaction.DeleteKeyAction"]], "deploycontractaction (class in pyonear.transaction)": [[11, "pyonear.transaction.DeployContractAction"]], "executionmetadatafieldless (class in pyonear.transaction)": [[11, "pyonear.transaction.ExecutionMetadataFieldless"]], "executionoutcome (class in pyonear.transaction)": [[11, "pyonear.transaction.ExecutionOutcome"]], "executionoutcomewithid (class in pyonear.transaction)": [[11, "pyonear.transaction.ExecutionOutcomeWithId"]], "executionoutcomewithidandproof (class in pyonear.transaction)": [[11, "pyonear.transaction.ExecutionOutcomeWithIdAndProof"]], "executionstatusfieldless (class in pyonear.transaction)": [[11, "pyonear.transaction.ExecutionStatusFieldless"]], "failure (partialexecutionstatusfieldless attribute)": [[11, "pyonear.transaction.PartialExecutionStatusFieldless.Failure"]], "functioncallaction (class in pyonear.transaction)": [[11, "pyonear.transaction.FunctionCallAction"]], "partialexecutionstatusfieldless (class in pyonear.transaction)": [[11, "pyonear.transaction.PartialExecutionStatusFieldless"]], "profiledata (class in pyonear.transaction)": [[11, "pyonear.transaction.ProfileData"]], "signedtransaction (class in pyonear.transaction)": [[11, "pyonear.transaction.SignedTransaction"]], "stakeaction (class in pyonear.transaction)": [[11, "pyonear.transaction.StakeAction"]], "transaction (class in pyonear.transaction)": [[11, "pyonear.transaction.Transaction"]], "transferaction (class in pyonear.transaction)": [[11, "pyonear.transaction.TransferAction"]], "unknown (executionstatusfieldless attribute)": [[11, "pyonear.transaction.ExecutionStatusFieldless.Unknown"]], "unknown (partialexecutionstatusfieldless attribute)": [[11, "pyonear.transaction.PartialExecutionStatusFieldless.Unknown"]], "v1 (executionmetadatafieldless attribute)": [[11, "pyonear.transaction.ExecutionMetadataFieldless.V1"]], "access_key (addkeyaction attribute)": [[11, "pyonear.transaction.AddKeyAction.access_key"]], "action_gas() (profiledata method)": [[11, "pyonear.transaction.ProfileData.action_gas"]], "actions (transaction attribute)": [[11, "pyonear.transaction.Transaction.actions"]], "add_action_cost() (profiledata method)": [[11, "pyonear.transaction.ProfileData.add_action_cost"]], "add_ext_cost() (profiledata method)": [[11, "pyonear.transaction.ProfileData.add_ext_cost"]], "add_key() (transaction method)": [[11, "pyonear.transaction.Transaction.add_key"]], "args (functioncallaction attribute)": [[11, "pyonear.transaction.FunctionCallAction.args"]], "beneficiary_id (deleteaccountaction attribute)": [[11, "pyonear.transaction.DeleteAccountAction.beneficiary_id"]], "block_hash (executionoutcomewithidandproof attribute)": [[11, "pyonear.transaction.ExecutionOutcomeWithIdAndProof.block_hash"]], "block_hash (transaction attribute)": [[11, "pyonear.transaction.Transaction.block_hash"]], "code (deploycontractaction attribute)": [[11, "pyonear.transaction.DeployContractAction.code"]], "compute_wasm_instruction_cost() (profiledata method)": [[11, "pyonear.transaction.ProfileData.compute_wasm_instruction_cost"]], "create_account() (transaction method)": [[11, "pyonear.transaction.Transaction.create_account"]], "delete_account() (transaction method)": [[11, "pyonear.transaction.Transaction.delete_account"]], "delete_key() (transaction method)": [[11, "pyonear.transaction.Transaction.delete_key"]], "deploy_contract() (transaction method)": [[11, "pyonear.transaction.Transaction.deploy_contract"]], "deposit (functioncallaction attribute)": [[11, "pyonear.transaction.FunctionCallAction.deposit"]], "deposit (transferaction attribute)": [[11, "pyonear.transaction.TransferAction.deposit"]], "executor_id (executionoutcome attribute)": [[11, "pyonear.transaction.ExecutionOutcome.executor_id"]], "from_base64() (signedtransaction static method)": [[11, "pyonear.transaction.SignedTransaction.from_base64"]], "from_bytes() (addkeyaction static method)": [[11, "pyonear.transaction.AddKeyAction.from_bytes"]], "from_bytes() (createaccountaction static method)": [[11, "pyonear.transaction.CreateAccountAction.from_bytes"]], "from_bytes() (deleteaccountaction static method)": [[11, "pyonear.transaction.DeleteAccountAction.from_bytes"]], "from_bytes() (deletekeyaction static method)": [[11, "pyonear.transaction.DeleteKeyAction.from_bytes"]], "from_bytes() (deploycontractaction static method)": [[11, "pyonear.transaction.DeployContractAction.from_bytes"]], "from_bytes() (executionoutcome static method)": [[11, "pyonear.transaction.ExecutionOutcome.from_bytes"]], "from_bytes() (executionoutcomewithid static method)": [[11, "pyonear.transaction.ExecutionOutcomeWithId.from_bytes"]], "from_bytes() (executionoutcomewithidandproof static method)": [[11, "pyonear.transaction.ExecutionOutcomeWithIdAndProof.from_bytes"]], "from_bytes() (functioncallaction static method)": [[11, "pyonear.transaction.FunctionCallAction.from_bytes"]], "from_bytes() (profiledata static method)": [[11, "pyonear.transaction.ProfileData.from_bytes"]], "from_bytes() (signedtransaction static method)": [[11, "pyonear.transaction.SignedTransaction.from_bytes"]], "from_bytes() (stakeaction static method)": [[11, "pyonear.transaction.StakeAction.from_bytes"]], "from_bytes() (transaction static method)": [[11, "pyonear.transaction.Transaction.from_bytes"]], "from_bytes() (transferaction static method)": [[11, "pyonear.transaction.TransferAction.from_bytes"]], "from_json() (addkeyaction static method)": [[11, "pyonear.transaction.AddKeyAction.from_json"]], "from_json() (createaccountaction static method)": [[11, "pyonear.transaction.CreateAccountAction.from_json"]], "from_json() (deleteaccountaction static method)": [[11, "pyonear.transaction.DeleteAccountAction.from_json"]], "from_json() (deletekeyaction static method)": [[11, "pyonear.transaction.DeleteKeyAction.from_json"]], "from_json() (deploycontractaction static method)": [[11, "pyonear.transaction.DeployContractAction.from_json"]], "from_json() (functioncallaction static method)": [[11, "pyonear.transaction.FunctionCallAction.from_json"]], "from_json() (signedtransaction static method)": [[11, "pyonear.transaction.SignedTransaction.from_json"]], "from_json() (stakeaction static method)": [[11, "pyonear.transaction.StakeAction.from_json"]], "from_json() (transaction static method)": [[11, "pyonear.transaction.Transaction.from_json"]], "from_json() (transferaction static method)": [[11, "pyonear.transaction.TransferAction.from_json"]], "function_call() (transaction method)": [[11, "pyonear.transaction.Transaction.function_call"]], "gas (functioncallaction attribute)": [[11, "pyonear.transaction.FunctionCallAction.gas"]], "gas_burnt (executionoutcome attribute)": [[11, "pyonear.transaction.ExecutionOutcome.gas_burnt"]], "get_action_cost() (profiledata method)": [[11, "pyonear.transaction.ProfileData.get_action_cost"]], "get_ext_cost() (profiledata method)": [[11, "pyonear.transaction.ProfileData.get_ext_cost"]], "get_hash_and_size() (transaction method)": [[11, "pyonear.transaction.Transaction.get_hash_and_size"]], "hash (signedtransaction attribute)": [[11, "pyonear.transaction.SignedTransaction.hash"]], "host_gas() (profiledata method)": [[11, "pyonear.transaction.ProfileData.host_gas"]], "id (executionoutcomewithid attribute)": [[11, "pyonear.transaction.ExecutionOutcomeWithId.id"]], "id() (executionoutcomewithidandproof method)": [[11, "pyonear.transaction.ExecutionOutcomeWithIdAndProof.id"]], "logs (executionoutcome attribute)": [[11, "pyonear.transaction.ExecutionOutcome.logs"]], "merge() (profiledata method)": [[11, "pyonear.transaction.ProfileData.merge"]], "metadata (executionoutcome attribute)": [[11, "pyonear.transaction.ExecutionOutcome.metadata"]], "method_name (functioncallaction attribute)": [[11, "pyonear.transaction.FunctionCallAction.method_name"]], "nonce (transaction attribute)": [[11, "pyonear.transaction.Transaction.nonce"]], "outcome (executionoutcomewithid attribute)": [[11, "pyonear.transaction.ExecutionOutcomeWithId.outcome"]], "outcome_with_id (executionoutcomewithidandproof attribute)": [[11, "pyonear.transaction.ExecutionOutcomeWithIdAndProof.outcome_with_id"]], "proof (executionoutcomewithidandproof attribute)": [[11, "pyonear.transaction.ExecutionOutcomeWithIdAndProof.proof"]], "public_key (addkeyaction attribute)": [[11, "pyonear.transaction.AddKeyAction.public_key"]], "public_key (deletekeyaction attribute)": [[11, "pyonear.transaction.DeleteKeyAction.public_key"]], "public_key (stakeaction attribute)": [[11, "pyonear.transaction.StakeAction.public_key"]], "public_key (transaction attribute)": [[11, "pyonear.transaction.Transaction.public_key"]], "pyonear.transaction": [[11, "module-pyonear.transaction"]], "receipt_ids (executionoutcome attribute)": [[11, "pyonear.transaction.ExecutionOutcome.receipt_ids"]], "receiver_id (transaction attribute)": [[11, "pyonear.transaction.Transaction.receiver_id"]], "sign() (transaction method)": [[11, "pyonear.transaction.Transaction.sign"]], "signature (signedtransaction attribute)": [[11, "pyonear.transaction.SignedTransaction.signature"]], "signer_id (transaction attribute)": [[11, "pyonear.transaction.Transaction.signer_id"]], "size (signedtransaction attribute)": [[11, "pyonear.transaction.SignedTransaction.size"]], "stake (stakeaction attribute)": [[11, "pyonear.transaction.StakeAction.stake"]], "stake() (transaction method)": [[11, "pyonear.transaction.Transaction.stake"]], "status (executionoutcome attribute)": [[11, "pyonear.transaction.ExecutionOutcome.status"]], "to_base64() (signedtransaction method)": [[11, "pyonear.transaction.SignedTransaction.to_base64"]], "to_hashes() (executionoutcomewithid method)": [[11, "pyonear.transaction.ExecutionOutcomeWithId.to_hashes"]], "to_json() (addkeyaction method)": [[11, "pyonear.transaction.AddKeyAction.to_json"]], "to_json() (createaccountaction method)": [[11, "pyonear.transaction.CreateAccountAction.to_json"]], "to_json() (deleteaccountaction method)": [[11, "pyonear.transaction.DeleteAccountAction.to_json"]], "to_json() (deletekeyaction method)": [[11, "pyonear.transaction.DeleteKeyAction.to_json"]], "to_json() (deploycontractaction method)": [[11, "pyonear.transaction.DeployContractAction.to_json"]], "to_json() (functioncallaction method)": [[11, "pyonear.transaction.FunctionCallAction.to_json"]], "to_json() (signedtransaction method)": [[11, "pyonear.transaction.SignedTransaction.to_json"]], "to_json() (stakeaction method)": [[11, "pyonear.transaction.StakeAction.to_json"]], "to_json() (transaction method)": [[11, "pyonear.transaction.Transaction.to_json"]], "to_json() (transferaction method)": [[11, "pyonear.transaction.TransferAction.to_json"]], "tokens_burnt (executionoutcome attribute)": [[11, "pyonear.transaction.ExecutionOutcome.tokens_burnt"]], "transaction (signedtransaction attribute)": [[11, "pyonear.transaction.SignedTransaction.transaction"]], "transfer() (transaction method)": [[11, "pyonear.transaction.Transaction.transfer"]], "verify_transaction_signature() (in module pyonear.transaction)": [[11, "pyonear.transaction.verify_transaction_signature"]]}})