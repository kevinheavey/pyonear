from typing import ClassVar

import pyonear.config

class ActionCosts:
    add_key: ClassVar["ActionCosts"]
    create_account: ClassVar["ActionCosts"]
    delete_account: ClassVar["ActionCosts"]
    delete_key: ClassVar["ActionCosts"]
    deploy_contract: ClassVar["ActionCosts"]
    function_call: ClassVar["ActionCosts"]
    new_receipt: ClassVar["ActionCosts"]
    stake: ClassVar["ActionCosts"]
    transfer: ClassVar["ActionCosts"]
    value_return: ClassVar["ActionCosts"]
    def __eq__(self, other) -> bool: ...
    def __hash__(self) -> int: ...
    def __int__(self) -> int: ...

class ExtCosts:
    alt_bn128_g1_multiexp_base: ClassVar["ExtCosts"]
    alt_bn128_g1_multiexp_element: ClassVar["ExtCosts"]
    alt_bn128_g1_sum_base: ClassVar["ExtCosts"]
    alt_bn128_g1_sum_element: ClassVar["ExtCosts"]
    alt_bn128_pairing_check_base: ClassVar["ExtCosts"]
    alt_bn128_pairing_check_element: ClassVar["ExtCosts"]
    base: ClassVar["ExtCosts"]
    contract_loading_base: ClassVar["ExtCosts"]
    contract_loading_bytes: ClassVar["ExtCosts"]
    ecrecover_base: ClassVar["ExtCosts"]
    ed25519_verify_base: ClassVar["ExtCosts"]
    ed25519_verify_byte: ClassVar["ExtCosts"]
    keccak256_base: ClassVar["ExtCosts"]
    keccak256_byte: ClassVar["ExtCosts"]
    keccak512_base: ClassVar["ExtCosts"]
    keccak512_byte: ClassVar["ExtCosts"]
    log_base: ClassVar["ExtCosts"]
    log_byte: ClassVar["ExtCosts"]
    promise_and_base: ClassVar["ExtCosts"]
    promise_and_per_promise: ClassVar["ExtCosts"]
    promise_return: ClassVar["ExtCosts"]
    read_cached_trie_node: ClassVar["ExtCosts"]
    read_memory_base: ClassVar["ExtCosts"]
    read_memory_byte: ClassVar["ExtCosts"]
    read_register_base: ClassVar["ExtCosts"]
    read_register_byte: ClassVar["ExtCosts"]
    ripemd160_base: ClassVar["ExtCosts"]
    ripemd160_block: ClassVar["ExtCosts"]
    sha256_base: ClassVar["ExtCosts"]
    sha256_byte: ClassVar["ExtCosts"]
    storage_has_key_base: ClassVar["ExtCosts"]
    storage_has_key_byte: ClassVar["ExtCosts"]
    storage_iter_create_from_byte: ClassVar["ExtCosts"]
    storage_iter_create_prefix_base: ClassVar["ExtCosts"]
    storage_iter_create_prefix_byte: ClassVar["ExtCosts"]
    storage_iter_create_range_base: ClassVar["ExtCosts"]
    storage_iter_create_to_byte: ClassVar["ExtCosts"]
    storage_iter_next_base: ClassVar["ExtCosts"]
    storage_iter_next_key_byte: ClassVar["ExtCosts"]
    storage_iter_next_value_byte: ClassVar["ExtCosts"]
    storage_read_base: ClassVar["ExtCosts"]
    storage_read_key_byte: ClassVar["ExtCosts"]
    storage_read_value_byte: ClassVar["ExtCosts"]
    storage_remove_base: ClassVar["ExtCosts"]
    storage_remove_key_byte: ClassVar["ExtCosts"]
    storage_remove_ret_value_byte: ClassVar["ExtCosts"]
    storage_write_base: ClassVar["ExtCosts"]
    storage_write_evicted_byte: ClassVar["ExtCosts"]
    storage_write_key_byte: ClassVar["ExtCosts"]
    storage_write_value_byte: ClassVar["ExtCosts"]
    touching_trie_node: ClassVar["ExtCosts"]
    utf16_decoding_base: ClassVar["ExtCosts"]
    utf16_decoding_byte: ClassVar["ExtCosts"]
    utf8_decoding_base: ClassVar["ExtCosts"]
    utf8_decoding_byte: ClassVar["ExtCosts"]
    validator_stake_base: ClassVar["ExtCosts"]
    validator_total_stake_base: ClassVar["ExtCosts"]
    write_memory_base: ClassVar["ExtCosts"]
    write_memory_byte: ClassVar["ExtCosts"]
    write_register_base: ClassVar["ExtCosts"]
    write_register_byte: ClassVar["ExtCosts"]
    def __eq__(self, other) -> bool: ...
    def __hash__(self) -> int: ...
    def __int__(self) -> int: ...
