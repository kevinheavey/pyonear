from typing import Tuple, Callable, Union, Sequence

class CryptoHash:
    def __init__(self, data: Union[bytes, Sequence[int]]) -> None: ...
    @staticmethod
    def default() -> "CryptoHash": ...
    @staticmethod
    def from_bytes(data: bytes) -> "CryptoHash": ...
    @staticmethod
    def from_json(raw: str) -> "CryptoHash": ...
    @staticmethod
    def from_str(s: str) -> "CryptoHash": ...
    @staticmethod
    def hash_bytes(data: bytes) -> "CryptoHash": ...
    def to_json(self) -> str: ...
    @staticmethod
    def zero() -> "CryptoHash": ...
    def __bytes__(self) -> bytes: ...
    def __hash__(self) -> int: ...
    def __reduce__(self) -> Tuple[Callable, Tuple[bytes]]: ...

def crypto_hash(data: bytes) -> CryptoHash: ...
